2023-08-08T17:20:29.550Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:20:29.553Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:20:29.558Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:20:29.560Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:20:29.563Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:20:29.565Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:20:29.568Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:20:29.571Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:20:29.574Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:29.584Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:29.591Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:29.597Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:29.603Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:29.610Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:29.615Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:29.619Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:20:29.620Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:20:29.622Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:20:29.623Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:20:29.625Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:20:29.626Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:20:29.627Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:20:29.629Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:20:29.635Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:29.645Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:29.653Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:20:29.656Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:29.662Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:29.665Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:20:29.667Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:29.672Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:29.674Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:20:29.677Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:20:29.682Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:29.684Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:20:29.685Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:29.693Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:29.696Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:20:29.698Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:29.705Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:29.708Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:20:29.712Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:20:29.718Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:29.834Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('3cfeb79e-7917-4a17-b64e-fc29840933f0','admin','$2b$10$VG3fVkAl5bnZ5qHlHhgZNeLUDXceSfJdZ3GYOV7iNx1Y4Xj2R3Y2O','2023-08-08 17:20:29.825 +00:00','2023-08-08 17:20:29.825 +00:00'),('0034eefa-eecf-4b12-b84f-e9fa736f0a86','user1@example.com','$2b$10$eByx7cIvAIU21jjTyPEYP.32aitrjVC98zzFeda9VDOSf.5TyZidm','2023-08-08 17:20:29.825 +00:00','2023-08-08 17:20:29.825 +00:00'),('182655a1-1a8d-4d48-89a7-30090ccc54ec','user2@example.com','$2b$10$lGTdo.aYsK.77KDHnmqbQ.kyJ9f70fDaEC7y4O5wwfOjOyckDRkG.','2023-08-08 17:20:29.825 +00:00','2023-08-08 17:20:29.825 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:20:29.841Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:20:29.839 +00:00','2023-08-08 17:20:29.839 +00:00'),(DEFAULT,'USA','2023-08-08 17:20:29.839 +00:00','2023-08-08 17:20:29.839 +00:00'),(DEFAULT,'China','2023-08-08 17:20:29.839 +00:00','2023-08-08 17:20:29.839 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:20:29.839 +00:00','2023-08-08 17:20:29.839 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:20:29.839 +00:00','2023-08-08 17:20:29.839 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:29.846Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:20:29.844 +00:00','2023-08-08 17:20:29.844 +00:00'),(DEFAULT,'USD','2023-08-08 17:20:29.844 +00:00','2023-08-08 17:20:29.844 +00:00'),(DEFAULT,'CHY','2023-08-08 17:20:29.844 +00:00','2023-08-08 17:20:29.844 +00:00'),(DEFAULT,'UAH','2023-08-08 17:20:29.844 +00:00','2023-08-08 17:20:29.844 +00:00'),(DEFAULT,'KZT','2023-08-08 17:20:29.844 +00:00','2023-08-08 17:20:29.844 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:29.850Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00'),(DEFAULT,'Medications','2023-08-08 17:20:29.848 +00:00','2023-08-08 17:20:29.848 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:29.854Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:20:29.852 +00:00','2023-08-08 17:20:29.852 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:29.859Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('407174b1-41d5-4d97-8846-cf6ee4271d56','Carter','Feil','2023-08-08 17:20:29.857 +00:00','2023-08-08 17:20:29.857 +00:00','3cfeb79e-7917-4a17-b64e-fc29840933f0',5,3),('8612e63f-0ace-4020-a480-0041c5c143f2','Reginald','Hagenes','2023-08-08 17:20:29.857 +00:00','2023-08-08 17:20:29.857 +00:00','0034eefa-eecf-4b12-b84f-e9fa736f0a86',1,1),('6dc667bf-1bfa-4b48-916e-2fc510b0297b','Ulices','McCullough','2023-08-08 17:20:29.857 +00:00','2023-08-08 17:20:29.857 +00:00','182655a1-1a8d-4d48-89a7-30090ccc54ec',3,3) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:20:29.891Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Refined Granite Sausages',200,'2025-04-06','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,2,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Ergonomic Metal Towels',228,'2023-11-17','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,9,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Gorgeous Frozen Salad',24,'2023-07-09','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',6,9,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Incredible Fresh Gloves',110,'2024-11-07','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',5,2,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Handmade Steel Gloves',247,'2025-04-10','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',5,9,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Generic Granite Pizza',140,'2023-11-19','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',6,10,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Licensed Steel Shoes',216,'2025-02-17','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,1,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Sleek Granite Car',217,'2025-03-20','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,10,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Gorgeous Soft Chips',248,'2025-03-14','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,8,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Refined Frozen Table',23,'2025-04-21','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,9,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Fantastic Plastic Fish',176,'2024-04-01','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,1,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Sleek Soft Tuna',188,'2025-01-08','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,8,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Fantastic Frozen Shoes',177,'2024-06-22','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,3,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Licensed Metal Hat',232,'2024-09-29','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',10,4,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Practical Fresh Mouse',222,'2024-02-29','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,9,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Licensed Cotton Pizza',102,'2024-12-08','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',6,9,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Unbranded Wooden Chicken',218,'2024-08-09','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,10,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Handcrafted Metal Pants',96,'2023-07-12','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,3,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Sleek Metal Tuna',77,'2024-04-09','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,9,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Sleek Soft Gloves',182,'2023-09-14','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',5,1,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Ergonomic Wooden Chips',192,'2024-03-18','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,3,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Tasty Steel Mouse',248,'2023-07-17','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',1,1,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Fantastic Concrete Salad',249,'2024-07-12','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,9,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Intelligent Plastic Table',85,'2024-02-15','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',10,7,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Handmade Metal Pants',227,'2025-02-17','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,5,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Ergonomic Wooden Chair',61,'2025-02-13','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,6,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Handmade Soft Bacon',94,'2023-08-13','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,10,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Refined Steel Pants',120,'2023-08-23','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',10,2,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Refined Frozen Chair',175,'2023-07-24','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,2,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Refined Concrete Bacon',157,'2024-10-27','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,3,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Incredible Steel Sausages',219,'2024-03-03','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,2,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Intelligent Cotton Cheese',249,'2023-12-31','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,4,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Incredible Metal Chips',31,'2024-09-24','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',2,10,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Intelligent Rubber Fish',7,'2025-03-20','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,6,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Refined Frozen Gloves',1,'2023-11-12','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',6,9,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Small Frozen Salad',210,'2024-07-18','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',10,9,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Tasty Concrete Ball',132,'2025-04-13','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',2,3,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Tasty Cotton Car',170,'2023-12-14','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,2,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Rustic Cotton Computer',116,'2024-08-01','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,2,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Licensed Soft Shirt',66,'2024-06-07','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,5,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Practical Rubber Hat',213,'2024-03-16','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,1,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Refined Cotton Table',46,'2023-08-18','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,8,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Handcrafted Soft Pants',136,'2024-07-02','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,10,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Tasty Frozen Gloves',124,'2025-01-15','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',1,1,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Fantastic Frozen Pants',215,'2025-02-22','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,1,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Intelligent Steel Chair',174,'2025-01-10','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',9,8,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Ergonomic Frozen Salad',86,'2023-08-08','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,8,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Unbranded Fresh Cheese',189,'2024-02-28','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,3,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Sleek Plastic Gloves',245,'2024-05-30','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',6,5,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Tasty Granite Shirt',241,'2023-11-03','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,3,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Gorgeous Frozen Shoes',48,'2024-07-23','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',5,10,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Refined Rubber Table',205,'2023-08-10','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,2,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Tasty Granite Pants',238,'2024-10-22','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,7,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Generic Granite Fish',180,'2024-11-16','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',6,4,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Generic Fresh Salad',99,'2024-02-09','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,5,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Awesome Rubber Fish',255,'2024-02-02','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',1,2,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Fantastic Concrete Hat',51,'2023-10-05','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,2,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Unbranded Frozen Chair',2,'2025-01-18','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',6,4,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Practical Wooden Pizza',110,'2023-10-14','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',10,7,'182655a1-1a8d-4d48-89a7-30090ccc54ec'),(DEFAULT,'Awesome Steel Computer',74,'2025-05-04','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',5,3,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Generic Concrete Chicken',31,'2024-03-29','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',8,6,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Awesome Fresh Bike',231,'2024-06-13','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',4,7,'3cfeb79e-7917-4a17-b64e-fc29840933f0'),(DEFAULT,'Unbranded Rubber Chicken',26,'2024-02-05','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',3,3,'0034eefa-eecf-4b12-b84f-e9fa736f0a86'),(DEFAULT,'Ergonomic Wooden Soap',106,'2025-02-27','2023-08-08 17:20:29.864 +00:00','2023-08-08 17:20:29.864 +00:00',7,9,'0034eefa-eecf-4b12-b84f-e9fa736f0a86') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:20:48.970Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:20:48.998Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:20:49.003Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:20:49.006Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:20:49.009Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:20:49.009Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:49.015Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:20:49.019Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:20:49.019Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:49.022Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:20:49.036Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:20:49.040Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:49.041Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:20:49.049Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:20:49.055Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:49.060Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:49.061Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = '1';
2023-08-08T17:20:49.111Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:49.119Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:49.125Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:49.132Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:20:49.138Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:20:49.139Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:20:49.141Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:20:49.142Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:20:49.143Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:20:49.143Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:20:49.144Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:20:49.146Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:20:49.150Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:49.160Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:49.167Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:20:49.168Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:49.175Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:49.176Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:20:49.177Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:49.182Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:49.183Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:20:49.184Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:20:49.193Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:49.194Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:20:49.194Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:49.200Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:49.203Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:20:49.204Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:20:49.210Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:49.213Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:20:49.214Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:20:49.219Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:20:49.320Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('42c2498f-a7f5-46d3-9818-e5e3376adabc','admin','$2b$10$6TrdnMxpzLmNPn4iC85Kn.fYv1S3ImdEZHDFJYsJH2STuu81VQmwS','2023-08-08 17:20:49.315 +00:00','2023-08-08 17:20:49.315 +00:00'),('a9eead58-24df-48fe-815b-740c1e86ab9b','user1@example.com','$2b$10$N8m44.QUuyjI/d7sMBlLkeOvHgqQ0Q74fRLweALVMrUc43ByMeTty','2023-08-08 17:20:49.315 +00:00','2023-08-08 17:20:49.315 +00:00'),('9c6077f2-3377-4c41-8c05-08d05b8ed9d2','user2@example.com','$2b$10$1fnm1rkHIB4xX8Q60jiLuOLOIrD.MYixIDDy.EhABFfn71X7s1NlK','2023-08-08 17:20:49.315 +00:00','2023-08-08 17:20:49.315 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:20:49.324Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:20:49.323 +00:00','2023-08-08 17:20:49.323 +00:00'),(DEFAULT,'USA','2023-08-08 17:20:49.323 +00:00','2023-08-08 17:20:49.323 +00:00'),(DEFAULT,'China','2023-08-08 17:20:49.323 +00:00','2023-08-08 17:20:49.323 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:20:49.323 +00:00','2023-08-08 17:20:49.323 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:20:49.323 +00:00','2023-08-08 17:20:49.323 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:49.327Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:20:49.326 +00:00','2023-08-08 17:20:49.326 +00:00'),(DEFAULT,'USD','2023-08-08 17:20:49.326 +00:00','2023-08-08 17:20:49.326 +00:00'),(DEFAULT,'CHY','2023-08-08 17:20:49.326 +00:00','2023-08-08 17:20:49.326 +00:00'),(DEFAULT,'UAH','2023-08-08 17:20:49.326 +00:00','2023-08-08 17:20:49.326 +00:00'),(DEFAULT,'KZT','2023-08-08 17:20:49.326 +00:00','2023-08-08 17:20:49.326 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:49.330Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00'),(DEFAULT,'Medications','2023-08-08 17:20:49.329 +00:00','2023-08-08 17:20:49.329 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:49.334Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:20:49.332 +00:00','2023-08-08 17:20:49.332 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:20:49.337Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('6335afdc-d431-46e4-8e52-15f8eb07af54','Josiah','Kassulke','2023-08-08 17:20:49.336 +00:00','2023-08-08 17:20:49.336 +00:00','42c2498f-a7f5-46d3-9818-e5e3376adabc',2,4),('505a7499-1b35-4145-b53f-7c5e590de1ac','Emmie','Wilderman','2023-08-08 17:20:49.336 +00:00','2023-08-08 17:20:49.336 +00:00','a9eead58-24df-48fe-815b-740c1e86ab9b',1,4),('93cea576-21cc-4498-88c7-0e63c4386b74','Cecile','Kertzmann','2023-08-08 17:20:49.336 +00:00','2023-08-08 17:20:49.336 +00:00','9c6077f2-3377-4c41-8c05-08d05b8ed9d2',2,2) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:20:49.358Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Rustic Wooden Mouse',202,'2024-04-10','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',3,2,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Awesome Plastic Chair',155,'2024-11-21','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',5,2,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Tasty Granite Soap',107,'2025-02-23','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',6,10,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Awesome Soft Keyboard',165,'2024-05-15','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',1,10,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Rustic Wooden Salad',7,'2025-04-29','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',1,8,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Gorgeous Frozen Shoes',43,'2024-11-29','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',7,7,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Ergonomic Soft Computer',43,'2023-09-07','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,5,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Rustic Metal Mouse',147,'2024-08-16','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,3,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Intelligent Cotton Computer',50,'2024-04-27','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,4,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Tasty Wooden Fish',64,'2024-02-01','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,6,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Small Soft Towels',133,'2024-01-02','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',4,10,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Refined Plastic Ball',131,'2023-09-30','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',4,1,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Awesome Concrete Ball',9,'2024-11-07','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,8,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Refined Soft Pizza',198,'2024-11-18','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',5,10,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Unbranded Soft Bacon',150,'2023-11-26','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',8,2,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Licensed Concrete Towels',9,'2024-03-14','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',8,5,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Intelligent Cotton Cheese',224,'2025-02-21','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',8,7,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Rustic Concrete Bacon',90,'2024-10-15','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',1,2,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Tasty Soft Cheese',214,'2024-12-18','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',7,4,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Handmade Fresh Mouse',188,'2023-08-10','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',1,8,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Refined Rubber Car',210,'2024-04-18','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',4,7,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Refined Metal Sausages',155,'2025-01-15','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',5,10,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Ergonomic Soft Soap',140,'2024-06-30','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,6,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Fantastic Concrete Pants',194,'2024-05-27','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',7,2,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Handmade Soft Bike',17,'2025-01-20','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',5,8,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Licensed Concrete Chips',125,'2023-10-23','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',5,5,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Unbranded Soft Towels',46,'2024-02-21','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',3,9,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Gorgeous Soft Fish',209,'2024-04-09','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',5,1,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Generic Soft Chicken',61,'2023-07-17','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',1,8,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Fantastic Frozen Tuna',178,'2024-11-15','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',7,9,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Rustic Frozen Chicken',91,'2023-07-10','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',6,8,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Generic Granite Chips',189,'2023-07-12','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',5,7,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Gorgeous Soft Computer',214,'2024-10-01','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,9,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Awesome Concrete Soap',209,'2024-09-14','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,8,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Generic Fresh Shirt',78,'2024-02-25','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,9,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Small Cotton Soap',142,'2025-02-02','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,2,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Unbranded Soft Bike',76,'2023-11-25','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',4,10,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Licensed Steel Bike',187,'2024-09-18','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,4,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Ergonomic Cotton Towels',205,'2024-11-05','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',6,4,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Incredible Cotton Tuna',29,'2023-07-12','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,1,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Practical Frozen Fish',91,'2025-04-15','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,5,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Handmade Fresh Salad',131,'2025-02-02','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,2,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Unbranded Rubber Chips',21,'2023-09-06','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',1,7,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Sleek Granite Hat',80,'2024-08-21','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,2,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Ergonomic Granite Mouse',65,'2025-02-22','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',7,8,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Awesome Wooden Pizza',55,'2024-11-04','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,2,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Practical Plastic Table',121,'2024-10-19','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',3,2,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Ergonomic Concrete Pizza',152,'2024-06-10','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',1,1,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Generic Cotton Salad',232,'2023-11-07','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,3,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Handmade Rubber Keyboard',66,'2023-11-01','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,5,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Licensed Concrete Shoes',227,'2025-02-15','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',7,7,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Small Wooden Shirt',133,'2024-04-23','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',6,10,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Practical Wooden Gloves',63,'2023-08-03','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,3,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Licensed Plastic Salad',50,'2024-04-16','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,8,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Handcrafted Wooden Cheese',143,'2023-09-18','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,9,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Incredible Metal Pizza',113,'2025-04-19','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',7,5,'9c6077f2-3377-4c41-8c05-08d05b8ed9d2'),(DEFAULT,'Fantastic Metal Chicken',208,'2024-01-28','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,6,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Fantastic Granite Chicken',117,'2023-10-12','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',10,5,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Refined Fresh Table',234,'2025-03-19','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',2,7,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Tasty Steel Ball',215,'2024-06-10','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',3,8,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Generic Plastic Sausages',170,'2024-09-01','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',4,3,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Small Concrete Salad',242,'2024-04-23','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',8,7,'42c2498f-a7f5-46d3-9818-e5e3376adabc'),(DEFAULT,'Refined Concrete Computer',35,'2024-10-18','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',8,1,'a9eead58-24df-48fe-815b-740c1e86ab9b'),(DEFAULT,'Awesome Concrete Fish',157,'2023-09-17','2023-08-08 17:20:49.340 +00:00','2023-08-08 17:20:49.340 +00:00',9,7,'42c2498f-a7f5-46d3-9818-e5e3376adabc') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:22:09.240Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:22:09.243Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:22:09.248Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:22:09.251Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:22:09.253Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:22:09.257Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:22:09.259Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:22:09.262Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:22:09.265Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:22:09.280Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:22:09.289Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:22:09.297Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:22:09.306Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:22:09.315Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:22:09.324Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:22:09.333Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:22:09.334Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:22:09.335Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:22:09.337Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:22:09.338Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:22:09.339Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:22:09.340Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:22:09.342Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:22:09.348Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:22:09.359Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:22:09.367Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:22:09.369Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:22:09.376Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:22:09.379Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:22:09.380Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:22:09.387Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:22:09.389Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:22:09.391Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:22:09.399Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:22:09.402Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:22:09.403Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:22:09.410Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:22:09.413Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:22:09.415Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:22:09.422Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:22:09.425Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:22:09.428Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:22:09.435Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:22:09.526Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('13be96c6-fd43-4066-9fa1-ac4fda8739c2','admin','$2b$10$3dC6/3zOK.HIE01wztS70OYVC1KeL1kflZpDUxR0sQ8pRO2.1Fvw6','2023-08-08 17:22:09.521 +00:00','2023-08-08 17:22:09.521 +00:00'),('2604078d-3138-4856-b8f5-64879da5a867','user1@example.com','$2b$10$wEDWdfHuBf5Mc9QoK9w0QeHTqgyWsPzgLdg/lc910KB1LAXJ0LmpC','2023-08-08 17:22:09.521 +00:00','2023-08-08 17:22:09.521 +00:00'),('77677b63-718f-4757-adca-eb3452164970','user2@example.com','$2b$10$0MviCfNqr/Jw99FAcQPnmeEsG9hSwoHTQ43crzy3ujUj4YleNkeI.','2023-08-08 17:22:09.521 +00:00','2023-08-08 17:22:09.521 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:22:09.530Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:22:09.529 +00:00','2023-08-08 17:22:09.529 +00:00'),(DEFAULT,'USA','2023-08-08 17:22:09.529 +00:00','2023-08-08 17:22:09.529 +00:00'),(DEFAULT,'China','2023-08-08 17:22:09.529 +00:00','2023-08-08 17:22:09.529 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:22:09.529 +00:00','2023-08-08 17:22:09.529 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:22:09.529 +00:00','2023-08-08 17:22:09.529 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:22:09.533Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:22:09.532 +00:00','2023-08-08 17:22:09.532 +00:00'),(DEFAULT,'USD','2023-08-08 17:22:09.532 +00:00','2023-08-08 17:22:09.532 +00:00'),(DEFAULT,'CHY','2023-08-08 17:22:09.532 +00:00','2023-08-08 17:22:09.532 +00:00'),(DEFAULT,'UAH','2023-08-08 17:22:09.532 +00:00','2023-08-08 17:22:09.532 +00:00'),(DEFAULT,'KZT','2023-08-08 17:22:09.532 +00:00','2023-08-08 17:22:09.532 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:22:09.536Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00'),(DEFAULT,'Medications','2023-08-08 17:22:09.534 +00:00','2023-08-08 17:22:09.534 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:22:09.540Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:22:09.538 +00:00','2023-08-08 17:22:09.538 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:22:09.545Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('b0ce8f4b-a995-4c04-8e3d-ab18865afb5b','Jonas','Feeney','2023-08-08 17:22:09.544 +00:00','2023-08-08 17:22:09.544 +00:00','13be96c6-fd43-4066-9fa1-ac4fda8739c2',1,3),('27ce1dcc-de50-47f5-9f5f-c3115e5e3ed5','Melany','Wolff','2023-08-08 17:22:09.544 +00:00','2023-08-08 17:22:09.544 +00:00','2604078d-3138-4856-b8f5-64879da5a867',4,1),('6814e558-d2c2-4bb8-bd5c-8551e8ce5172','Hillard','Dietrich','2023-08-08 17:22:09.544 +00:00','2023-08-08 17:22:09.544 +00:00','77677b63-718f-4757-adca-eb3452164970',3,1) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:22:09.582Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Gorgeous Steel Keyboard',6,'2025-02-25','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,7,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Sleek Plastic Hat',219,'2024-03-04','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,1,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Licensed Wooden Table',247,'2023-08-20','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',1,8,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Incredible Cotton Tuna',47,'2024-03-14','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,5,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Unbranded Rubber Hat',102,'2023-12-24','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',7,4,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Refined Soft Mouse',138,'2024-05-13','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',2,4,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Handcrafted Fresh Towels',176,'2023-08-26','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,4,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Gorgeous Steel Bike',86,'2024-04-06','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',2,9,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Intelligent Fresh Computer',208,'2024-08-14','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',3,4,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Refined Fresh Salad',35,'2024-02-22','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',2,1,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Tasty Steel Chicken',36,'2023-12-23','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,10,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Handmade Concrete Car',110,'2023-09-28','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',8,3,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Sleek Fresh Keyboard',157,'2024-10-10','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,8,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Incredible Fresh Pants',91,'2023-12-23','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',4,4,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Intelligent Steel Computer',211,'2024-03-06','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,3,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Licensed Granite Bike',213,'2024-03-01','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',9,7,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Licensed Plastic Cheese',162,'2023-11-21','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',7,7,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Intelligent Wooden Gloves',154,'2024-11-30','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',3,3,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Incredible Plastic Chair',11,'2025-04-04','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,1,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Fantastic Granite Sausages',170,'2024-02-09','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',7,1,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Gorgeous Cotton Shoes',175,'2024-06-18','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,8,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Incredible Metal Chicken',116,'2024-07-26','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',3,6,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Handcrafted Concrete Bike',165,'2024-05-19','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',4,9,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Gorgeous Fresh Cheese',164,'2024-02-11','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',4,10,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Tasty Metal Pizza',69,'2024-06-27','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',3,8,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Sleek Cotton Sausages',122,'2023-12-07','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',7,8,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Fantastic Rubber Towels',218,'2025-04-14','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',8,9,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Intelligent Rubber Fish',84,'2023-12-03','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,3,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Handmade Concrete Hat',217,'2024-02-15','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,10,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Refined Wooden Chicken',115,'2025-02-07','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,7,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Sleek Wooden Salad',36,'2023-07-08','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,3,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Sleek Rubber Pizza',114,'2025-04-29','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,10,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Rustic Steel Bike',198,'2023-07-31','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,6,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Tasty Steel Bacon',226,'2024-04-30','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,5,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Handmade Wooden Keyboard',217,'2024-10-25','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',7,6,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Intelligent Metal Ball',129,'2025-03-26','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',7,3,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Licensed Fresh Fish',215,'2024-02-07','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',8,9,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Fantastic Granite Ball',84,'2023-11-04','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',4,9,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Handmade Cotton Pizza',221,'2024-10-24','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,3,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Gorgeous Wooden Car',227,'2024-01-15','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,7,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Unbranded Concrete Chicken',85,'2025-03-08','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',2,10,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Ergonomic Granite Shoes',126,'2023-10-23','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,10,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Small Cotton Gloves',116,'2024-08-23','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',10,8,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Awesome Steel Shirt',159,'2024-05-31','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,5,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Handmade Granite Bacon',194,'2025-03-11','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',2,9,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Incredible Cotton Bike',183,'2025-03-01','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,3,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Intelligent Wooden Hat',120,'2025-02-20','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',9,1,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Awesome Wooden Shirt',106,'2024-09-07','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',7,8,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Handmade Wooden Bike',8,'2023-11-19','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,1,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Refined Rubber Computer',68,'2024-11-02','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,7,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Awesome Granite Ball',31,'2023-08-27','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,10,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Incredible Rubber Sausages',145,'2024-10-19','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',3,8,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Unbranded Fresh Sausages',127,'2025-02-07','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,1,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Generic Plastic Mouse',86,'2024-05-13','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',1,8,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Sleek Steel Gloves',124,'2025-03-10','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,1,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Handmade Rubber Cheese',254,'2023-09-30','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',1,10,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Sleek Wooden Chicken',60,'2023-10-24','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',4,10,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Handcrafted Frozen Shirt',119,'2024-02-17','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,8,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Fantastic Fresh Sausages',240,'2024-03-30','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,3,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Handmade Cotton Shoes',148,'2023-11-17','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',5,8,'77677b63-718f-4757-adca-eb3452164970'),(DEFAULT,'Licensed Soft Salad',13,'2025-01-25','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',1,7,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Unbranded Soft Gloves',246,'2024-01-13','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,8,'13be96c6-fd43-4066-9fa1-ac4fda8739c2'),(DEFAULT,'Handmade Fresh Towels',127,'2023-08-17','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',2,9,'2604078d-3138-4856-b8f5-64879da5a867'),(DEFAULT,'Incredible Fresh Mouse',200,'2025-04-15','2023-08-08 17:22:09.551 +00:00','2023-08-08 17:22:09.551 +00:00',6,5,'77677b63-718f-4757-adca-eb3452164970') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:22:16.285Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:22:16.323Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:22:16.333Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:22:16.340Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:22:16.345Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:22:16.362Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:22:16.373Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = '1';
2023-08-08T17:23:08.740Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:23:08.743Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:23:08.748Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:23:08.750Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:23:08.752Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:23:08.755Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:23:08.757Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:23:08.758Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:23:08.761Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:08.769Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:08.773Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:08.776Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:08.783Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:08.790Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:08.797Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:08.804Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:23:08.805Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:23:08.805Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:23:08.806Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:23:08.807Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:23:08.807Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:23:08.807Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:23:08.808Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:23:08.810Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:08.819Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:08.822Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:23:08.823Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:08.828Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:08.829Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:23:08.831Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:08.836Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:08.839Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:23:08.840Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:23:08.847Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:08.849Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:23:08.850Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:08.856Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:08.858Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:23:08.858Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:08.866Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:08.869Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:23:08.872Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:23:08.878Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:08.993Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('6cb6125f-5e9c-417e-acdb-5025d704c5cb','admin','$2b$10$BaZ5rf8NkuEujCl4ecF53.A374tYg8P/9lQK4UMOtvCfQczmJ/d3.','2023-08-08 17:23:08.986 +00:00','2023-08-08 17:23:08.986 +00:00'),('96eeaaa2-0acb-47ca-9b52-b8fdac1772d4','user1@example.com','$2b$10$2fJ5jbzzIwI5etY0jVBbG.6aob028KwrebB0dCjDwNpCRYrWsr8p.','2023-08-08 17:23:08.986 +00:00','2023-08-08 17:23:08.986 +00:00'),('e09843fe-181f-42c2-b77d-3b0d080e6aa8','user2@example.com','$2b$10$l/QLWLOLJzUJSo1ybQTABu4nE8l5mW5ZJrqo4tzDH8HpHY8/KfDBm','2023-08-08 17:23:08.986 +00:00','2023-08-08 17:23:08.986 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:23:09.000Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:23:08.997 +00:00','2023-08-08 17:23:08.997 +00:00'),(DEFAULT,'USA','2023-08-08 17:23:08.997 +00:00','2023-08-08 17:23:08.997 +00:00'),(DEFAULT,'China','2023-08-08 17:23:08.997 +00:00','2023-08-08 17:23:08.997 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:23:08.997 +00:00','2023-08-08 17:23:08.997 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:23:08.997 +00:00','2023-08-08 17:23:08.997 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:09.004Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:23:09.002 +00:00','2023-08-08 17:23:09.002 +00:00'),(DEFAULT,'USD','2023-08-08 17:23:09.002 +00:00','2023-08-08 17:23:09.002 +00:00'),(DEFAULT,'CHY','2023-08-08 17:23:09.002 +00:00','2023-08-08 17:23:09.002 +00:00'),(DEFAULT,'UAH','2023-08-08 17:23:09.002 +00:00','2023-08-08 17:23:09.002 +00:00'),(DEFAULT,'KZT','2023-08-08 17:23:09.002 +00:00','2023-08-08 17:23:09.002 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:09.007Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00'),(DEFAULT,'Medications','2023-08-08 17:23:09.006 +00:00','2023-08-08 17:23:09.006 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:09.010Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:23:09.010 +00:00','2023-08-08 17:23:09.010 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:09.014Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('15cee016-c061-4161-aa77-2750be0c93d9','Jody','Williamson','2023-08-08 17:23:09.013 +00:00','2023-08-08 17:23:09.013 +00:00','6cb6125f-5e9c-417e-acdb-5025d704c5cb',1,4),('58c36f84-98f1-4729-a16a-85f6a69eebf5','Ruth','Williamson','2023-08-08 17:23:09.013 +00:00','2023-08-08 17:23:09.013 +00:00','96eeaaa2-0acb-47ca-9b52-b8fdac1772d4',1,3),('1a58bb44-f776-4244-9bda-2c617750e795','Emmitt','Emmerich','2023-08-08 17:23:09.013 +00:00','2023-08-08 17:23:09.013 +00:00','e09843fe-181f-42c2-b77d-3b0d080e6aa8',5,1) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:23:09.029Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Sleek Soft Shirt',192,'2023-07-26','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,10,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Practical Plastic Pants',111,'2024-09-15','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,6,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Practical Wooden Chair',191,'2024-04-22','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,6,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Gorgeous Soft Cheese',83,'2023-12-09','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',10,1,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Tasty Fresh Bacon',222,'2024-01-23','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,9,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Incredible Frozen Ball',205,'2023-11-24','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',7,7,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Small Granite Pants',145,'2023-12-06','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,8,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Ergonomic Concrete Bike',97,'2024-11-15','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,5,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Rustic Wooden Shoes',156,'2023-10-25','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,4,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Unbranded Granite Tuna',181,'2024-10-13','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',7,6,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Gorgeous Soft Soap',215,'2024-06-17','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,4,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Handcrafted Cotton Computer',210,'2025-01-11','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,1,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Sleek Steel Table',176,'2025-02-23','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',6,5,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Sleek Plastic Sausages',222,'2023-09-25','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',3,3,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Handcrafted Cotton Gloves',194,'2023-11-06','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,10,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Handmade Rubber Bike',185,'2024-04-25','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,8,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Ergonomic Granite Soap',112,'2024-12-05','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',8,10,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Awesome Soft Fish',84,'2024-11-17','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,3,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Fantastic Concrete Pizza',104,'2024-08-05','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',8,7,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Fantastic Fresh Keyboard',55,'2023-12-13','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,6,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Handmade Cotton Cheese',236,'2023-08-27','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,7,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Handmade Rubber Shirt',62,'2025-04-09','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',4,3,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Practical Granite Chicken',97,'2024-04-01','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,6,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Small Cotton Pizza',56,'2024-08-20','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',7,8,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Handcrafted Soft Shoes',28,'2024-06-15','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',8,1,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Licensed Frozen Chips',185,'2023-11-05','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',3,6,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Practical Cotton Shirt',180,'2023-08-26','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,3,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Generic Plastic Pizza',13,'2024-05-27','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',6,9,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Intelligent Wooden Sausages',7,'2023-11-11','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,8,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Handcrafted Fresh Soap',252,'2023-11-16','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',6,6,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Practical Metal Keyboard',127,'2024-12-10','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,2,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Refined Granite Mouse',228,'2023-07-23','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,4,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Rustic Concrete Computer',149,'2024-10-04','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,1,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Incredible Frozen Salad',14,'2024-06-23','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,2,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Handmade Plastic Tuna',138,'2024-10-15','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,9,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Rustic Wooden Salad',202,'2024-02-29','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,4,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Gorgeous Fresh Computer',102,'2023-09-06','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,3,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Generic Soft Salad',56,'2024-12-11','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,6,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Refined Metal Car',131,'2023-09-04','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,6,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Sleek Steel Cheese',18,'2025-04-04','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,6,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Generic Frozen Tuna',49,'2024-12-16','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,4,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Rustic Wooden Keyboard',173,'2024-05-22','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',4,7,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Tasty Fresh Cheese',187,'2023-11-19','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,4,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Ergonomic Rubber Tuna',165,'2024-03-27','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,4,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Rustic Soft Computer',45,'2025-02-27','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,2,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Ergonomic Frozen Pizza',189,'2025-02-04','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,3,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Practical Steel Sausages',140,'2025-01-18','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,2,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Refined Plastic Computer',172,'2024-10-03','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,10,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Intelligent Wooden Hat',10,'2023-11-16','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',7,9,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Intelligent Metal Shirt',96,'2023-10-08','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,7,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Sleek Fresh Chair',231,'2024-09-08','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,10,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Practical Soft Gloves',98,'2024-02-18','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,5,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Licensed Wooden Sausages',147,'2024-12-20','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',3,3,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Unbranded Fresh Mouse',25,'2024-10-02','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',5,1,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Generic Steel Tuna',239,'2023-07-15','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',10,1,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Rustic Rubber Salad',194,'2025-03-29','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',1,1,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Sleek Frozen Table',196,'2025-04-08','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',8,7,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Sleek Plastic Chicken',1,'2023-12-09','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',4,5,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Intelligent Steel Hat',84,'2025-02-19','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',10,10,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Licensed Plastic Sausages',111,'2024-04-26','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',8,6,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4'),(DEFAULT,'Generic Wooden Bacon',177,'2024-06-11','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',2,3,'6cb6125f-5e9c-417e-acdb-5025d704c5cb'),(DEFAULT,'Tasty Cotton Keyboard',180,'2024-10-16','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',4,6,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Intelligent Metal Mouse',51,'2024-02-29','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',8,7,'e09843fe-181f-42c2-b77d-3b0d080e6aa8'),(DEFAULT,'Licensed Metal Chicken',230,'2024-08-20','2023-08-08 17:23:09.018 +00:00','2023-08-08 17:23:09.018 +00:00',9,5,'96eeaaa2-0acb-47ca-9b52-b8fdac1772d4') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:23:18.089Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:23:18.092Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:23:18.096Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:23:18.098Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:23:18.101Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:23:18.103Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:23:18.105Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:23:18.107Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:23:18.110Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:18.123Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:18.131Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:18.140Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:18.148Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:18.155Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:18.159Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:23:18.163Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:23:18.164Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:23:18.164Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:23:18.165Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:23:18.167Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:23:18.167Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:23:18.168Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:23:18.169Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:23:18.171Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:18.179Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:18.182Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:23:18.183Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:18.190Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:18.192Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:23:18.193Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:18.200Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:18.203Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:23:18.203Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:23:18.208Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:18.210Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:23:18.210Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:18.215Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:18.218Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:23:18.219Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:23:18.224Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:18.226Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:23:18.229Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:23:18.234Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:23:18.352Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('ffbcf26e-2393-446b-ad55-6e574fe1b151','admin','$2b$10$tJZ4c6eob66phGWbwfEOUedoCdZG5yej171KTryY7zgGpVLcaVhya','2023-08-08 17:23:18.341 +00:00','2023-08-08 17:23:18.341 +00:00'),('8279ce76-080a-4ad5-86a3-a3fb541f0c41','user1@example.com','$2b$10$8mkDEsowi1ihKC2fp4tl3ODl4VjQWcW461zPk6i2xbKasmJd0vsGu','2023-08-08 17:23:18.341 +00:00','2023-08-08 17:23:18.341 +00:00'),('0cbc4410-e2c3-454d-a9ff-800e80ea5ab4','user2@example.com','$2b$10$B1Ib3mtPx3VmJXXOokM8UurNdm/otfUaooOd3DHY6xQ2C3RBPLCSe','2023-08-08 17:23:18.341 +00:00','2023-08-08 17:23:18.341 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:23:18.359Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:23:18.356 +00:00','2023-08-08 17:23:18.356 +00:00'),(DEFAULT,'USA','2023-08-08 17:23:18.356 +00:00','2023-08-08 17:23:18.356 +00:00'),(DEFAULT,'China','2023-08-08 17:23:18.356 +00:00','2023-08-08 17:23:18.356 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:23:18.356 +00:00','2023-08-08 17:23:18.356 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:23:18.356 +00:00','2023-08-08 17:23:18.356 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:18.363Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:23:18.361 +00:00','2023-08-08 17:23:18.361 +00:00'),(DEFAULT,'USD','2023-08-08 17:23:18.361 +00:00','2023-08-08 17:23:18.361 +00:00'),(DEFAULT,'CHY','2023-08-08 17:23:18.361 +00:00','2023-08-08 17:23:18.361 +00:00'),(DEFAULT,'UAH','2023-08-08 17:23:18.361 +00:00','2023-08-08 17:23:18.361 +00:00'),(DEFAULT,'KZT','2023-08-08 17:23:18.361 +00:00','2023-08-08 17:23:18.361 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:18.367Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00'),(DEFAULT,'Medications','2023-08-08 17:23:18.365 +00:00','2023-08-08 17:23:18.365 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:18.371Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:23:18.370 +00:00','2023-08-08 17:23:18.370 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:18.377Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('2f19f8d1-0d1b-49b3-a611-a6f47def150a','Jany','Ward','2023-08-08 17:23:18.375 +00:00','2023-08-08 17:23:18.375 +00:00','ffbcf26e-2393-446b-ad55-6e574fe1b151',4,5),('ad79be2c-5e2e-49cd-8f38-25c19bbf1162','Beaulah','Hagenes','2023-08-08 17:23:18.375 +00:00','2023-08-08 17:23:18.375 +00:00','8279ce76-080a-4ad5-86a3-a3fb541f0c41',1,5),('f73b4272-9ef1-4461-bd72-ffdd9b0720c4','Yesenia','Bernier','2023-08-08 17:23:18.375 +00:00','2023-08-08 17:23:18.375 +00:00','0cbc4410-e2c3-454d-a9ff-800e80ea5ab4',2,3) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:23:18.402Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Incredible Concrete Soap',205,'2023-12-15','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,10,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Rustic Wooden Mouse',106,'2023-08-13','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',3,2,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Unbranded Fresh Bacon',15,'2023-08-24','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',10,5,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Handcrafted Concrete Sausages',147,'2024-06-04','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',7,6,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Handcrafted Cotton Soap',184,'2025-03-29','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,10,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Rustic Rubber Computer',192,'2024-02-25','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,6,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Practical Rubber Chicken',34,'2024-06-15','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',10,4,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Handmade Soft Ball',95,'2024-12-21','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',4,2,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Handmade Steel Pizza',240,'2024-09-15','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,6,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Incredible Steel Keyboard',64,'2024-11-09','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',6,6,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Gorgeous Cotton Chicken',243,'2024-11-10','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',5,6,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Ergonomic Steel Cheese',54,'2024-07-23','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,8,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Intelligent Frozen Gloves',22,'2023-12-09','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',5,7,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Fantastic Wooden Ball',6,'2023-08-07','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',8,3,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Handmade Granite Salad',238,'2024-01-12','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',5,3,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Refined Fresh Hat',83,'2025-04-21','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,10,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Refined Steel Chair',19,'2023-11-26','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',1,8,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Handcrafted Plastic Sausages',24,'2024-12-01','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',10,4,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Unbranded Wooden Soap',174,'2025-04-25','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,3,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Awesome Wooden Tuna',184,'2024-07-08','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',1,8,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Handcrafted Frozen Mouse',72,'2024-06-15','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',7,3,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Gorgeous Wooden Salad',30,'2024-12-13','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,6,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Unbranded Fresh Hat',202,'2024-07-27','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,10,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Ergonomic Plastic Chair',175,'2025-04-30','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',7,7,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Unbranded Frozen Sausages',41,'2025-02-15','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',1,3,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Small Concrete Keyboard',213,'2024-05-31','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',8,5,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Unbranded Cotton Bacon',65,'2024-09-16','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',8,9,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Tasty Wooden Chips',2,'2024-11-05','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,2,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Incredible Steel Pants',225,'2024-05-20','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,1,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Small Granite Sausages',61,'2024-05-04','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',3,9,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Fantastic Metal Chair',237,'2025-05-02','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',10,4,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Sleek Steel Chair',74,'2023-10-08','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',7,6,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Rustic Wooden Shoes',96,'2024-06-06','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',6,9,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Intelligent Cotton Salad',250,'2024-08-20','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',5,2,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Incredible Granite Car',135,'2024-07-04','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',1,5,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Refined Metal Salad',79,'2024-12-08','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',8,3,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Generic Soft Chair',67,'2024-06-27','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',4,7,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Awesome Wooden Shirt',116,'2023-11-07','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,4,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Unbranded Rubber Shirt',228,'2023-11-20','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,2,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Fantastic Granite Bike',189,'2023-12-19','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',5,8,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Refined Soft Chips',147,'2024-04-06','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',4,10,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Handcrafted Frozen Bike',248,'2023-11-06','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,10,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Refined Metal Towels',34,'2023-11-27','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',4,9,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Practical Frozen Towels',175,'2025-01-23','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',3,2,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Incredible Granite Chicken',249,'2023-10-02','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',4,9,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Generic Plastic Soap',221,'2024-12-25','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,3,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Intelligent Cotton Salad',150,'2024-12-04','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',6,9,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Sleek Concrete Keyboard',80,'2024-03-20','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',3,2,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Awesome Plastic Towels',248,'2023-12-11','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',8,4,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Sleek Concrete Mouse',91,'2023-11-16','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,9,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Rustic Wooden Hat',202,'2024-11-26','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',7,9,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Tasty Steel Fish',145,'2024-12-14','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,3,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Awesome Plastic Car',124,'2024-09-15','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',10,8,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Intelligent Granite Tuna',199,'2024-04-14','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,10,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Practical Frozen Bacon',96,'2025-03-28','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',9,1,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Practical Frozen Bike',57,'2024-08-05','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',1,3,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Ergonomic Cotton Soap',215,'2024-03-21','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',10,8,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Licensed Steel Computer',89,'2024-02-05','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',6,9,'ffbcf26e-2393-446b-ad55-6e574fe1b151'),(DEFAULT,'Handcrafted Granite Bike',212,'2024-10-12','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',7,6,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Gorgeous Wooden Bacon',218,'2024-01-06','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',8,10,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Rustic Cotton Bacon',139,'2025-02-25','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',1,3,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Unbranded Metal Shoes',231,'2023-07-23','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',2,3,'8279ce76-080a-4ad5-86a3-a3fb541f0c41'),(DEFAULT,'Sleek Granite Shirt',250,'2023-12-25','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',5,5,'0cbc4410-e2c3-454d-a9ff-800e80ea5ab4'),(DEFAULT,'Gorgeous Plastic Towels',31,'2024-09-27','2023-08-08 17:23:18.382 +00:00','2023-08-08 17:23:18.382 +00:00',7,5,'ffbcf26e-2393-446b-ad55-6e574fe1b151') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:23:21.036Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:23:21.075Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:21.085Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:23:21.093Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:23:21.098Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:23:21.118Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:23:21.145Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = '1';
2023-08-08T17:39:27.505Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:39:27.508Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:39:27.512Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:39:27.514Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:39:27.516Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:39:27.517Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:39:27.519Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:39:27.520Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:39:27.523Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:27.537Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:27.546Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:27.554Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:27.562Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:27.567Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:27.570Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:27.573Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:39:27.575Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:39:27.576Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:39:27.577Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:39:27.579Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:39:27.580Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:39:27.581Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:39:27.584Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:39:27.589Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:27.598Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:27.605Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:39:27.607Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:27.612Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:27.614Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:39:27.616Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:27.622Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:27.624Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:39:27.627Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:39:27.634Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:27.637Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:39:27.638Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:27.644Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:27.647Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:39:27.649Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:27.656Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:27.658Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:39:27.662Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:39:27.666Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:27.788Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('68ff8b9a-0686-4012-a19f-bdb834f28a09','admin','$2b$10$62iaGRkdZ.8L5NSvW0ZrPOTxr7.6L4JTEKZ/gpKCcp/z1hdYzrFiu','2023-08-08 17:39:27.782 +00:00','2023-08-08 17:39:27.782 +00:00'),('21e8853f-9d33-475a-b502-d1786a5ba84f','user1@example.com','$2b$10$lBog90xSHTsX.6TWPRBg0uGjojA4AvgpNILTY4.oISy7RQ/dnH5iu','2023-08-08 17:39:27.782 +00:00','2023-08-08 17:39:27.782 +00:00'),('5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586','user2@example.com','$2b$10$vCc0LeiZunAZTXU/SOc5h.K5dz7KE7Kq8LSne/7RqvnJEgpW8Y27u','2023-08-08 17:39:27.782 +00:00','2023-08-08 17:39:27.782 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:39:27.793Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:39:27.792 +00:00','2023-08-08 17:39:27.792 +00:00'),(DEFAULT,'USA','2023-08-08 17:39:27.792 +00:00','2023-08-08 17:39:27.792 +00:00'),(DEFAULT,'China','2023-08-08 17:39:27.792 +00:00','2023-08-08 17:39:27.792 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:39:27.792 +00:00','2023-08-08 17:39:27.792 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:39:27.792 +00:00','2023-08-08 17:39:27.792 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:27.796Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:39:27.795 +00:00','2023-08-08 17:39:27.795 +00:00'),(DEFAULT,'USD','2023-08-08 17:39:27.795 +00:00','2023-08-08 17:39:27.795 +00:00'),(DEFAULT,'CHY','2023-08-08 17:39:27.795 +00:00','2023-08-08 17:39:27.795 +00:00'),(DEFAULT,'UAH','2023-08-08 17:39:27.795 +00:00','2023-08-08 17:39:27.795 +00:00'),(DEFAULT,'KZT','2023-08-08 17:39:27.795 +00:00','2023-08-08 17:39:27.795 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:27.799Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00'),(DEFAULT,'Medications','2023-08-08 17:39:27.798 +00:00','2023-08-08 17:39:27.798 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:27.802Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:39:27.801 +00:00','2023-08-08 17:39:27.801 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:27.806Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('1ccc596d-d603-4250-b89b-a30b1255b55e','Mya','Jast','2023-08-08 17:39:27.805 +00:00','2023-08-08 17:39:27.805 +00:00','68ff8b9a-0686-4012-a19f-bdb834f28a09',2,3),('f6d06e8b-af76-468a-bb23-d07eaeec4f84','Sibyl','Borer','2023-08-08 17:39:27.805 +00:00','2023-08-08 17:39:27.805 +00:00','21e8853f-9d33-475a-b502-d1786a5ba84f',2,2),('14511a47-8346-4f8f-9f32-adff0eda3b4f','Ivory','Davis','2023-08-08 17:39:27.805 +00:00','2023-08-08 17:39:27.805 +00:00','5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586',5,3) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:39:27.820Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Awesome Plastic Chair',125,'2023-09-18','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,5,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Licensed Fresh Ball',107,'2023-08-20','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',1,5,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Generic Plastic Fish',244,'2024-11-29','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,8,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Sleek Plastic Bike',75,'2025-01-06','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,10,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Unbranded Plastic Shoes',62,'2024-06-22','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',9,9,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Generic Metal Keyboard',53,'2023-10-26','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,7,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Incredible Wooden Shoes',64,'2024-07-05','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,8,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Unbranded Steel Salad',148,'2025-01-06','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',5,8,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Awesome Concrete Chair',245,'2023-08-30','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',5,4,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Sleek Granite Keyboard',255,'2024-10-11','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,8,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Incredible Plastic Bike',88,'2024-12-29','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,9,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Intelligent Soft Hat',200,'2025-01-12','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',4,9,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Gorgeous Cotton Table',64,'2023-12-21','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',4,8,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Small Concrete Computer',104,'2024-04-17','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',9,5,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Refined Metal Ball',169,'2024-04-24','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',6,2,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Intelligent Cotton Towels',39,'2024-01-12','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,1,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Unbranded Fresh Soap',238,'2025-01-13','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',1,4,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Tasty Plastic Chips',9,'2024-02-09','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',2,7,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Unbranded Concrete Pizza',14,'2024-06-16','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,2,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Incredible Concrete Chair',131,'2024-05-16','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',9,3,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Rustic Concrete Table',191,'2025-03-24','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',2,5,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Handcrafted Cotton Tuna',8,'2025-01-21','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',2,10,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Refined Soft Chair',133,'2024-11-19','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',6,3,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Tasty Concrete Shirt',83,'2024-01-27','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,1,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Gorgeous Concrete Ball',139,'2024-12-13','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,8,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Refined Concrete Tuna',140,'2024-11-26','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,8,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Gorgeous Rubber Sausages',89,'2023-10-08','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,5,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Licensed Frozen Fish',236,'2024-05-01','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,2,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Intelligent Soft Salad',223,'2023-08-27','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',6,2,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Sleek Metal Pizza',161,'2024-03-24','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',3,10,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Fantastic Steel Soap',253,'2024-04-10','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',4,1,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Practical Concrete Chicken',112,'2024-12-27','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,7,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Fantastic Granite Mouse',50,'2024-10-31','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,9,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Gorgeous Soft Sausages',32,'2023-12-23','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',5,2,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Intelligent Soft Mouse',51,'2024-06-08','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',5,7,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Refined Soft Shoes',70,'2024-02-05','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',2,3,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Awesome Fresh Mouse',210,'2025-03-03','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',3,3,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Handcrafted Rubber Cheese',45,'2024-08-09','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,5,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Sleek Wooden Chips',173,'2024-08-17','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',3,7,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Practical Soft Tuna',84,'2025-04-12','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',1,1,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Tasty Concrete Tuna',58,'2023-12-24','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,1,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Handmade Granite Chair',229,'2023-11-28','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',2,2,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Rustic Concrete Soap',151,'2023-12-24','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',6,3,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Generic Cotton Ball',209,'2024-01-21','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,4,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Handmade Soft Tuna',32,'2024-10-13','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,8,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Practical Soft Gloves',204,'2024-08-01','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',4,4,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Unbranded Concrete Ball',243,'2023-08-18','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',9,8,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Tasty Fresh Cheese',84,'2024-05-19','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',5,2,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Incredible Soft Gloves',134,'2024-08-04','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,7,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Fantastic Granite Gloves',104,'2023-08-18','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,7,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Gorgeous Steel Tuna',230,'2023-12-07','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,5,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Awesome Granite Salad',109,'2025-04-07','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',3,1,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Generic Soft Gloves',77,'2024-04-18','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,9,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Licensed Cotton Fish',210,'2024-07-26','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',5,1,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Intelligent Concrete Salad',186,'2023-07-12','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',10,3,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Handcrafted Steel Chips',77,'2024-12-11','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',3,9,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Intelligent Wooden Sausages',23,'2025-02-12','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,3,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Handmade Granite Table',230,'2024-01-01','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',5,8,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Licensed Granite Bacon',57,'2024-03-26','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,8,'21e8853f-9d33-475a-b502-d1786a5ba84f'),(DEFAULT,'Sleek Cotton Shirt',222,'2024-06-05','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',1,8,'5bbf2a4d-b9ea-43db-a3e2-7710dbdfb586'),(DEFAULT,'Intelligent Frozen Pants',13,'2023-10-03','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',7,10,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Incredible Metal Shirt',57,'2024-07-04','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',4,7,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Intelligent Concrete Pizza',5,'2023-10-28','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',8,1,'68ff8b9a-0686-4012-a19f-bdb834f28a09'),(DEFAULT,'Handmade Concrete Chicken',102,'2024-08-10','2023-08-08 17:39:27.809 +00:00','2023-08-08 17:39:27.809 +00:00',6,6,'68ff8b9a-0686-4012-a19f-bdb834f28a09') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:39:32.532Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:39:32.595Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:32.606Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:32.619Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:39:32.627Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:39:32.656Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:39:32.681Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c04';
2023-08-08T17:39:52.769Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:39:52.773Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:39:52.776Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:39:52.778Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:39:52.780Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:39:52.782Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:39:52.784Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:39:52.786Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:39:52.789Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:52.795Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:52.799Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:52.803Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:52.806Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:52.810Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:52.813Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:39:52.817Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:39:52.818Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:39:52.819Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:39:52.820Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:39:52.822Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:39:52.822Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:39:52.823Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:39:52.825Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:39:52.829Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:52.836Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:52.842Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:39:52.844Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:52.849Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:52.850Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:39:52.852Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:52.857Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:52.859Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:39:52.860Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:39:52.868Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:52.871Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:39:52.872Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:52.879Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:52.883Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:39:52.884Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:39:52.893Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:52.896Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:39:52.899Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:39:52.906Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:39:53.018Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('494cb799-553c-4905-b7d6-26d8f6a747ca','admin','$2b$10$whJHyDiKjChV9Pg8W/RHF.5LbTs5J/SNekh8rVZ8BBRT/XCdfWP.6','2023-08-08 17:39:53.013 +00:00','2023-08-08 17:39:53.013 +00:00'),('27003d45-97e2-4f07-91e7-8d2f1231a70b','user1@example.com','$2b$10$c9q0xHwM0sxy5vuNoX2XMeqp0QgHjNbXAuhosIAMVMei6L698rzHm','2023-08-08 17:39:53.013 +00:00','2023-08-08 17:39:53.013 +00:00'),('66297349-b891-42d3-9fc0-5c1a7fe8a749','user2@example.com','$2b$10$hUPvnApRrPmo8aqcfgiOpuHOhCXMqPcO5LGsYoTAZiDMWFQFGPRxi','2023-08-08 17:39:53.013 +00:00','2023-08-08 17:39:53.013 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:39:53.023Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:39:53.021 +00:00','2023-08-08 17:39:53.021 +00:00'),(DEFAULT,'USA','2023-08-08 17:39:53.021 +00:00','2023-08-08 17:39:53.021 +00:00'),(DEFAULT,'China','2023-08-08 17:39:53.021 +00:00','2023-08-08 17:39:53.021 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:39:53.021 +00:00','2023-08-08 17:39:53.021 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:39:53.021 +00:00','2023-08-08 17:39:53.021 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:53.027Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:39:53.025 +00:00','2023-08-08 17:39:53.025 +00:00'),(DEFAULT,'USD','2023-08-08 17:39:53.025 +00:00','2023-08-08 17:39:53.025 +00:00'),(DEFAULT,'CHY','2023-08-08 17:39:53.025 +00:00','2023-08-08 17:39:53.025 +00:00'),(DEFAULT,'UAH','2023-08-08 17:39:53.025 +00:00','2023-08-08 17:39:53.025 +00:00'),(DEFAULT,'KZT','2023-08-08 17:39:53.025 +00:00','2023-08-08 17:39:53.025 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:53.032Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00'),(DEFAULT,'Medications','2023-08-08 17:39:53.030 +00:00','2023-08-08 17:39:53.030 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:53.038Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:39:53.035 +00:00','2023-08-08 17:39:53.035 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:53.044Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('9f7ba134-326f-45eb-94fe-b36774dc9fba','Erin','Reilly','2023-08-08 17:39:53.042 +00:00','2023-08-08 17:39:53.042 +00:00','494cb799-553c-4905-b7d6-26d8f6a747ca',5,3),('048e33a1-48c6-4c2b-8829-d19b8ccfe1f9','Lysanne','Ernser','2023-08-08 17:39:53.042 +00:00','2023-08-08 17:39:53.042 +00:00','27003d45-97e2-4f07-91e7-8d2f1231a70b',1,1),('851e9987-1364-45d0-9110-c0a98e9e9129','Raymundo','Trantow','2023-08-08 17:39:53.042 +00:00','2023-08-08 17:39:53.042 +00:00','66297349-b891-42d3-9fc0-5c1a7fe8a749',5,5) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:39:53.072Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Small Rubber Pizza',151,'2024-02-25','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',3,10,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Generic Fresh Shoes',24,'2025-02-14','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',1,9,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Generic Cotton Towels',222,'2025-01-22','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,6,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Fantastic Rubber Computer',226,'2025-04-21','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,9,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Tasty Cotton Ball',151,'2024-08-18','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',1,7,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Awesome Granite Gloves',147,'2024-12-06','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',3,7,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Unbranded Fresh Sausages',201,'2023-12-28','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',4,4,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Gorgeous Wooden Mouse',1,'2024-11-25','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,10,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Rustic Fresh Tuna',124,'2023-08-06','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,4,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Unbranded Rubber Fish',84,'2024-07-14','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',2,3,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Small Wooden Chair',159,'2023-09-30','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,9,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Generic Concrete Shirt',250,'2024-08-01','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',4,2,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Sleek Wooden Mouse',169,'2024-08-20','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',6,4,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Sleek Cotton Pants',215,'2023-10-15','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,10,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Licensed Cotton Keyboard',50,'2025-04-04','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',2,8,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Handcrafted Plastic Table',143,'2024-07-22','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',1,5,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Practical Metal Chips',75,'2024-08-15','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',8,9,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Licensed Steel Hat',63,'2025-03-27','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,9,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Handmade Wooden Salad',255,'2025-01-07','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,3,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Small Metal Bacon',49,'2023-11-14','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',3,2,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Ergonomic Frozen Table',88,'2024-04-12','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',6,8,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Unbranded Steel Cheese',26,'2024-11-29','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',4,2,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Ergonomic Rubber Ball',3,'2025-03-13','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',3,10,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Tasty Metal Shirt',120,'2024-03-23','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',2,2,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Small Wooden Computer',134,'2023-11-04','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',8,10,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Fantastic Plastic Car',228,'2024-01-11','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',6,7,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Licensed Frozen Car',121,'2024-09-21','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',5,2,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Licensed Metal Mouse',135,'2023-10-18','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',2,8,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Handmade Wooden Chair',167,'2024-12-09','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',8,7,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Handcrafted Metal Pizza',161,'2023-10-11','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',1,1,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Fantastic Concrete Gloves',105,'2023-07-26','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,4,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Handmade Plastic Bike',105,'2024-07-04','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',5,5,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Generic Cotton Shirt',181,'2023-08-21','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,8,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Handmade Steel Mouse',39,'2024-03-06','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',1,1,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Handmade Wooden Cheese',15,'2024-01-22','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,9,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Generic Cotton Hat',14,'2025-01-07','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,7,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Unbranded Wooden Cheese',99,'2025-01-08','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,7,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Refined Steel Computer',169,'2025-03-17','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,4,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Gorgeous Plastic Table',1,'2024-02-01','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',3,9,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Ergonomic Plastic Tuna',84,'2025-03-29','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',2,10,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Licensed Plastic Hat',227,'2024-08-24','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',8,5,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Ergonomic Plastic Salad',63,'2024-08-27','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,5,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Practical Fresh Table',194,'2024-12-31','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',4,8,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Ergonomic Wooden Bacon',33,'2023-10-03','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',1,1,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Unbranded Steel Sausages',156,'2025-04-19','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,10,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Generic Plastic Pizza',241,'2024-08-29','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,10,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Incredible Steel Car',28,'2023-09-08','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',5,6,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Intelligent Cotton Computer',170,'2024-02-07','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,3,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Generic Rubber Keyboard',99,'2024-05-21','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',6,3,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Fantastic Rubber Computer',98,'2023-11-13','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',1,6,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Generic Frozen Computer',240,'2024-01-22','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',6,3,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Intelligent Frozen Computer',89,'2023-10-09','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,3,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Fantastic Wooden Fish',223,'2023-12-07','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,3,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Practical Granite Fish',203,'2023-12-25','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,9,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Refined Metal Table',185,'2025-02-09','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',3,10,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Unbranded Metal Keyboard',193,'2024-12-27','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',3,3,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Sleek Frozen Chair',251,'2025-03-18','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,5,'27003d45-97e2-4f07-91e7-8d2f1231a70b'),(DEFAULT,'Sleek Rubber Bike',43,'2025-01-13','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',8,6,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Small Frozen Shoes',110,'2024-02-22','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,6,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Practical Rubber Gloves',173,'2024-09-06','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',10,10,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Refined Rubber Fish',27,'2024-06-11','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',6,1,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Small Rubber Hat',245,'2024-02-18','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',8,9,'66297349-b891-42d3-9fc0-5c1a7fe8a749'),(DEFAULT,'Awesome Soft Fish',124,'2023-09-19','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',9,6,'494cb799-553c-4905-b7d6-26d8f6a747ca'),(DEFAULT,'Awesome Fresh Shoes',207,'2023-12-05','2023-08-08 17:39:53.050 +00:00','2023-08-08 17:39:53.050 +00:00',7,10,'27003d45-97e2-4f07-91e7-8d2f1231a70b') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:39:59.728Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:39:59.778Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:59.789Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:39:59.800Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:39:59.807Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:39:59.846Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:39:59.879Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c04';
2023-08-08T17:40:35.225Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:40:35.228Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:40:35.231Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:40:35.233Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:40:35.235Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:40:35.237Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:40:35.239Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:40:35.243Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:40:35.246Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:40:35.267Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:40:35.277Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:40:35.287Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:40:35.296Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:40:35.303Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:40:35.307Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:40:35.310Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:40:35.311Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:40:35.313Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:40:35.314Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:40:35.315Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:40:35.316Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:40:35.317Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:40:35.318Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:40:35.323Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:40:35.332Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:40:35.339Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:40:35.340Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:40:35.346Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:40:35.347Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:40:35.349Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:40:35.354Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:40:35.356Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:40:35.358Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:40:35.363Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:40:35.365Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:40:35.365Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:40:35.371Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:40:35.373Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:40:35.375Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:40:35.380Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:40:35.382Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:40:35.384Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:40:35.389Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:40:35.503Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('1aefbc34-80da-4280-9522-25000aa0d52d','admin','$2b$10$97RgFnyyyn/mIYMLXG.Cg.aen8KOhYTh69iFFLLd5wtbfroBkeXFC','2023-08-08 17:40:35.497 +00:00','2023-08-08 17:40:35.497 +00:00'),('806c25cf-37ac-4577-b140-5a17408afeb7','user1@example.com','$2b$10$KK0RlBI5CU9S/gIuFH5osehf5cueLKJTrwSo4UGMjDu8dSnVi02Hi','2023-08-08 17:40:35.497 +00:00','2023-08-08 17:40:35.497 +00:00'),('299b5043-0665-4fca-abb9-55b41d2e06f7','user2@example.com','$2b$10$u39d/HTy7CYQ9kIoa6wxVujlUq8w2TDkhwyRaTnE5b5SqmJ3nb2JS','2023-08-08 17:40:35.497 +00:00','2023-08-08 17:40:35.497 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:40:35.508Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:40:35.506 +00:00','2023-08-08 17:40:35.506 +00:00'),(DEFAULT,'USA','2023-08-08 17:40:35.506 +00:00','2023-08-08 17:40:35.506 +00:00'),(DEFAULT,'China','2023-08-08 17:40:35.506 +00:00','2023-08-08 17:40:35.506 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:40:35.506 +00:00','2023-08-08 17:40:35.506 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:40:35.506 +00:00','2023-08-08 17:40:35.506 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:40:35.512Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:40:35.510 +00:00','2023-08-08 17:40:35.510 +00:00'),(DEFAULT,'USD','2023-08-08 17:40:35.510 +00:00','2023-08-08 17:40:35.510 +00:00'),(DEFAULT,'CHY','2023-08-08 17:40:35.510 +00:00','2023-08-08 17:40:35.510 +00:00'),(DEFAULT,'UAH','2023-08-08 17:40:35.510 +00:00','2023-08-08 17:40:35.510 +00:00'),(DEFAULT,'KZT','2023-08-08 17:40:35.510 +00:00','2023-08-08 17:40:35.510 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:40:35.516Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00'),(DEFAULT,'Medications','2023-08-08 17:40:35.514 +00:00','2023-08-08 17:40:35.514 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:40:35.520Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:40:35.518 +00:00','2023-08-08 17:40:35.518 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:40:35.527Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('899cab10-a873-4119-b67a-17f8f4dd9a1a','Lloyd','Pfannerstill','2023-08-08 17:40:35.525 +00:00','2023-08-08 17:40:35.525 +00:00','1aefbc34-80da-4280-9522-25000aa0d52d',5,3),('f1bf4045-e5f5-49f9-988a-0aef595949ad','Liliane','Gorczany','2023-08-08 17:40:35.525 +00:00','2023-08-08 17:40:35.525 +00:00','806c25cf-37ac-4577-b140-5a17408afeb7',4,4),('22820ca8-e20c-4f6a-ae13-0171e32c6def','Richard','Fisher','2023-08-08 17:40:35.525 +00:00','2023-08-08 17:40:35.525 +00:00','299b5043-0665-4fca-abb9-55b41d2e06f7',5,1) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:40:35.549Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Intelligent Cotton Shoes',245,'2024-06-28','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,1,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Ergonomic Frozen Mouse',59,'2023-10-21','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,7,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Sleek Frozen Hat',155,'2024-07-31','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',6,9,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Generic Granite Towels',218,'2024-08-15','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',1,9,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Generic Metal Mouse',3,'2025-01-10','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',3,10,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Unbranded Rubber Chicken',69,'2024-09-05','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',2,9,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Ergonomic Metal Salad',30,'2024-09-09','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,6,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Unbranded Wooden Car',171,'2025-04-25','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',2,7,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Tasty Fresh Shoes',145,'2024-08-23','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',5,4,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Fantastic Granite Chair',133,'2024-07-31','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,1,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Handmade Cotton Pizza',197,'2024-04-14','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',4,3,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Unbranded Plastic Sausages',58,'2025-03-19','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',1,10,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Practical Steel Towels',215,'2024-06-07','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,4,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Sleek Frozen Pants',254,'2023-08-05','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,8,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Handmade Soft Mouse',138,'2024-02-28','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',10,6,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Rustic Cotton Cheese',66,'2023-09-19','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',10,1,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Fantastic Cotton Shoes',172,'2023-07-16','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',3,4,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Gorgeous Granite Bike',127,'2023-09-07','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,2,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Rustic Frozen Chair',178,'2025-02-28','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',3,2,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Rustic Steel Table',130,'2024-10-31','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',1,3,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Tasty Granite Car',97,'2025-03-13','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',6,8,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Refined Wooden Salad',71,'2024-04-02','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',5,7,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Handmade Rubber Chips',245,'2023-08-04','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',1,7,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Tasty Soft Chair',114,'2025-01-09','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,4,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Sleek Fresh Gloves',4,'2025-01-11','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,3,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Generic Plastic Shoes',199,'2023-12-08','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',8,7,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Handmade Cotton Hat',151,'2025-02-18','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,9,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Refined Plastic Ball',145,'2024-08-06','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',3,1,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Ergonomic Rubber Soap',153,'2024-09-25','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',2,2,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Intelligent Wooden Ball',158,'2024-10-09','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,10,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Rustic Wooden Shoes',126,'2025-03-20','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',8,10,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Sleek Cotton Soap',103,'2025-04-02','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',8,10,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Generic Metal Bacon',213,'2023-10-04','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',10,9,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Unbranded Plastic Shirt',139,'2025-03-28','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',5,9,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Tasty Fresh Shirt',18,'2024-06-12','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,10,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Generic Soft Fish',12,'2025-01-16','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',3,7,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Sleek Rubber Pizza',204,'2024-10-29','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',10,2,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Handcrafted Frozen Gloves',106,'2023-08-13','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',1,2,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Intelligent Fresh Sausages',233,'2025-04-10','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,3,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Awesome Rubber Shirt',234,'2024-08-25','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,9,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Fantastic Wooden Chips',53,'2024-07-03','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',2,1,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Generic Granite Mouse',168,'2024-12-05','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',4,8,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Unbranded Plastic Cheese',242,'2024-05-10','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,10,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Fantastic Cotton Table',129,'2024-02-03','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,9,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Incredible Frozen Chips',151,'2023-12-19','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',2,5,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Unbranded Cotton Ball',145,'2024-04-02','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',8,6,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Handmade Wooden Table',233,'2024-08-11','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',10,3,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Fantastic Fresh Computer',40,'2024-05-11','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',5,2,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Intelligent Plastic Gloves',171,'2024-02-26','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',8,8,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Refined Granite Sausages',39,'2023-12-10','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',5,8,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Licensed Concrete Car',77,'2024-08-14','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',7,9,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Awesome Granite Chair',49,'2024-01-20','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',5,10,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Tasty Frozen Salad',249,'2023-10-05','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',6,3,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Fantastic Concrete Mouse',64,'2023-11-02','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',6,2,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Handcrafted Rubber Shoes',158,'2025-03-23','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,10,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Refined Rubber Tuna',178,'2023-11-17','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',3,3,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Handmade Soft Bacon',125,'2024-08-26','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',10,10,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Handmade Soft Pizza',141,'2024-09-04','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,9,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Practical Wooden Bacon',202,'2023-12-24','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',6,10,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Tasty Concrete Pizza',87,'2024-02-01','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',3,6,'299b5043-0665-4fca-abb9-55b41d2e06f7'),(DEFAULT,'Ergonomic Concrete Fish',204,'2025-03-12','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',1,2,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Generic Granite Pants',111,'2024-09-01','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',8,5,'1aefbc34-80da-4280-9522-25000aa0d52d'),(DEFAULT,'Intelligent Metal Bacon',109,'2023-07-17','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',9,4,'806c25cf-37ac-4577-b140-5a17408afeb7'),(DEFAULT,'Tasty Metal Shoes',96,'2024-04-01','2023-08-08 17:40:35.532 +00:00','2023-08-08 17:40:35.532 +00:00',6,3,'299b5043-0665-4fca-abb9-55b41d2e06f7') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:40:41.331Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:40:41.369Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:40:41.377Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:40:41.387Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:40:41.393Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:40:41.411Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:40:41.425Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = '333333333';
2023-08-08T17:41:43.381Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:41:43.384Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:41:43.389Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:41:43.391Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:41:43.394Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:41:43.397Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:41:43.399Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:41:43.401Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:41:43.404Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:41:43.415Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:41:43.422Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:41:43.429Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:41:43.436Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:41:43.442Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:41:43.450Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:41:43.456Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:41:43.457Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:41:43.457Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:41:43.458Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:41:43.459Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:41:43.459Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:41:43.459Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:41:43.461Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:41:43.463Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:41:43.470Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:41:43.474Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:41:43.475Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:41:43.480Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:41:43.481Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:41:43.482Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:41:43.488Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:41:43.489Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:41:43.490Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:41:43.496Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:41:43.498Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:41:43.499Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:41:43.504Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:41:43.506Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:41:43.507Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:41:43.512Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:41:43.514Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:41:43.515Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:41:43.521Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:41:43.633Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('a438e858-34bd-419f-bab9-3f9043da6d34','admin','$2b$10$041eAViyKQBVw4ugat9GcOguOhp10jg4hxZ36pQ41SBS0m2Z08bWa','2023-08-08 17:41:43.624 +00:00','2023-08-08 17:41:43.624 +00:00'),('c6b41d0b-f449-429b-9ce0-fcfd087a0cf3','user1@example.com','$2b$10$5xszSCUVUR8qGlPvFcNaSuVc67Bj2krC4yctbjAuBQrDG64u/Xdxy','2023-08-08 17:41:43.624 +00:00','2023-08-08 17:41:43.624 +00:00'),('66ef890c-6ebb-455e-a6bf-854904276901','user2@example.com','$2b$10$V9bKGhc8ZW/VLakHx5PMSORzeXf/kbvdPLLk7hUZa9bUx1qjpwDYm','2023-08-08 17:41:43.624 +00:00','2023-08-08 17:41:43.624 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:41:43.642Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:41:43.639 +00:00','2023-08-08 17:41:43.639 +00:00'),(DEFAULT,'USA','2023-08-08 17:41:43.639 +00:00','2023-08-08 17:41:43.639 +00:00'),(DEFAULT,'China','2023-08-08 17:41:43.639 +00:00','2023-08-08 17:41:43.639 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:41:43.639 +00:00','2023-08-08 17:41:43.639 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:41:43.639 +00:00','2023-08-08 17:41:43.639 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:41:43.647Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:41:43.644 +00:00','2023-08-08 17:41:43.644 +00:00'),(DEFAULT,'USD','2023-08-08 17:41:43.644 +00:00','2023-08-08 17:41:43.644 +00:00'),(DEFAULT,'CHY','2023-08-08 17:41:43.644 +00:00','2023-08-08 17:41:43.644 +00:00'),(DEFAULT,'UAH','2023-08-08 17:41:43.644 +00:00','2023-08-08 17:41:43.644 +00:00'),(DEFAULT,'KZT','2023-08-08 17:41:43.644 +00:00','2023-08-08 17:41:43.644 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:41:43.653Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00'),(DEFAULT,'Medications','2023-08-08 17:41:43.650 +00:00','2023-08-08 17:41:43.650 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:41:43.658Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:41:43.656 +00:00','2023-08-08 17:41:43.656 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:41:43.666Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('2bf525b7-0e76-48ad-ad17-e99745d6dfb2','Adolfo','Wolff','2023-08-08 17:41:43.664 +00:00','2023-08-08 17:41:43.664 +00:00','a438e858-34bd-419f-bab9-3f9043da6d34',5,5),('8ea3f733-4dd9-48c1-89f9-e1e5d65e1f1e','Selmer','Mueller','2023-08-08 17:41:43.664 +00:00','2023-08-08 17:41:43.664 +00:00','c6b41d0b-f449-429b-9ce0-fcfd087a0cf3',4,5),('9dc6b28d-445b-44c6-a98c-cd2b180e58d3','Elnora','Reynolds','2023-08-08 17:41:43.664 +00:00','2023-08-08 17:41:43.664 +00:00','66ef890c-6ebb-455e-a6bf-854904276901',4,3) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:41:43.697Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Ergonomic Metal Computer',132,'2024-03-22','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,7,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Gorgeous Cotton Tuna',170,'2024-05-05','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,1,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Licensed Rubber Chips',181,'2024-09-15','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',2,4,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Licensed Concrete Cheese',109,'2024-05-21','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,8,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Sleek Frozen Cheese',118,'2023-07-24','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,10,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Awesome Wooden Chicken',229,'2024-09-01','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',9,9,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Practical Soft Sausages',13,'2024-07-10','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',3,10,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Intelligent Rubber Bacon',1,'2024-04-24','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',10,4,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Tasty Soft Towels',29,'2024-11-04','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,1,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Sleek Rubber Towels',10,'2024-02-28','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,1,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Rustic Frozen Car',203,'2024-03-24','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,9,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Ergonomic Fresh Hat',5,'2024-02-03','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',3,10,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Unbranded Wooden Hat',21,'2024-01-11','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',1,5,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Practical Plastic Soap',172,'2023-10-16','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',8,10,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Ergonomic Wooden Hat',49,'2024-07-07','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',2,6,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Practical Wooden Ball',78,'2024-04-04','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',10,9,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Gorgeous Rubber Soap',53,'2024-09-04','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,7,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Tasty Frozen Cheese',83,'2024-04-28','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,8,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Unbranded Concrete Ball',50,'2025-01-23','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',8,4,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Unbranded Rubber Shirt',185,'2023-09-30','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',10,7,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Tasty Cotton Towels',151,'2025-02-26','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,1,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Handcrafted Frozen Tuna',189,'2023-08-09','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,9,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Tasty Wooden Towels',104,'2024-04-06','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',2,8,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Gorgeous Metal Ball',217,'2024-11-18','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',3,4,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Fantastic Granite Chicken',138,'2023-09-09','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,3,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Unbranded Fresh Pizza',247,'2024-03-04','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,3,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Unbranded Soft Computer',198,'2024-10-01','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,9,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Ergonomic Concrete Tuna',109,'2025-03-06','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',2,4,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Handmade Plastic Ball',42,'2023-09-29','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,10,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Licensed Fresh Bike',94,'2023-07-10','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',1,7,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Awesome Soft Pizza',42,'2024-04-21','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',10,3,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Practical Soft Tuna',124,'2023-09-26','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,8,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Ergonomic Fresh Bacon',96,'2024-10-15','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,5,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Gorgeous Fresh Towels',240,'2024-02-29','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,4,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Rustic Cotton Chicken',177,'2023-12-31','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',10,1,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Awesome Wooden Ball',131,'2023-08-20','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,8,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Sleek Wooden Gloves',164,'2024-11-27','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',9,8,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Generic Granite Pants',199,'2025-01-29','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',10,9,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Practical Concrete Chair',25,'2025-03-12','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,4,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Sleek Soft Car',57,'2024-04-24','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,8,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Handmade Soft Computer',111,'2023-09-09','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',10,1,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Sleek Steel Cheese',108,'2024-09-28','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,5,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Ergonomic Rubber Towels',32,'2023-12-12','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',3,5,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Unbranded Rubber Chair',177,'2024-07-01','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',3,1,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Unbranded Concrete Chicken',210,'2024-01-23','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,3,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Handcrafted Soft Soap',163,'2024-07-28','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,4,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Unbranded Rubber Bike',232,'2024-11-22','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,3,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Generic Wooden Sausages',114,'2023-12-27','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',1,7,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Small Steel Fish',235,'2023-11-02','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,2,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Tasty Fresh Keyboard',210,'2025-02-11','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',8,8,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Sleek Plastic Pants',255,'2025-02-08','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',2,3,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Rustic Fresh Ball',30,'2024-10-21','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',7,5,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Rustic Granite Pants',158,'2024-05-28','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,2,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Fantastic Granite Soap',42,'2024-12-21','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',9,4,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Gorgeous Plastic Keyboard',23,'2024-01-02','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',1,10,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Practical Steel Tuna',119,'2023-07-16','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',6,1,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Tasty Concrete Pizza',63,'2024-06-04','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',1,4,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Unbranded Metal Shoes',219,'2024-11-27','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,5,'a438e858-34bd-419f-bab9-3f9043da6d34'),(DEFAULT,'Practical Metal Gloves',246,'2023-11-28','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',1,7,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Ergonomic Plastic Gloves',131,'2024-06-18','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',5,7,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Handmade Cotton Hat',44,'2023-08-17','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',1,10,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Sleek Cotton Keyboard',200,'2023-07-17','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',4,1,'66ef890c-6ebb-455e-a6bf-854904276901'),(DEFAULT,'Rustic Concrete Keyboard',80,'2025-03-13','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',9,6,'c6b41d0b-f449-429b-9ce0-fcfd087a0cf3'),(DEFAULT,'Sleek Cotton Shirt',205,'2024-02-13','2023-08-08 17:41:43.673 +00:00','2023-08-08 17:41:43.673 +00:00',9,6,'a438e858-34bd-419f-bab9-3f9043da6d34') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:41:47.070Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:41:47.119Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:41:47.130Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:41:47.140Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:41:47.147Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:41:47.175Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:41:47.206Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c00';
2023-08-08T17:42:50.981Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:42:50.985Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:42:50.991Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:42:50.994Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:42:50.997Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:42:51.001Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:42:51.004Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:42:51.007Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:42:51.011Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:42:51.018Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:42:51.022Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:42:51.025Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:42:51.029Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:42:51.033Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:42:51.036Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:42:51.040Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:42:51.040Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:42:51.041Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:42:51.042Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:42:51.043Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:42:51.043Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:42:51.043Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:42:51.044Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:42:51.047Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:42:51.056Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:42:51.061Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:42:51.062Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:42:51.069Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:42:51.072Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:42:51.073Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:42:51.079Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:42:51.081Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:42:51.082Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:42:51.089Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:42:51.092Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:42:51.092Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:42:51.099Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:42:51.100Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:42:51.102Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:42:51.108Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:42:51.110Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:42:51.112Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:42:51.119Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:42:51.222Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('aff78ef3-5ba2-42e5-9446-d23c0369e4f3','admin','$2b$10$dvWQOzxyTtRvqNFTu3IGzOEeZbhDu/I4C0naPaYwgpncxLq1wrh0O','2023-08-08 17:42:51.217 +00:00','2023-08-08 17:42:51.217 +00:00'),('51253915-da22-425d-92c0-23c14ab2b699','user1@example.com','$2b$10$dTmS7gvRq04qJf4dVxoKMOS1f3gENm8LVYnkKWQxprLHbc6b6VCBG','2023-08-08 17:42:51.217 +00:00','2023-08-08 17:42:51.217 +00:00'),('2de72bc4-387b-4887-8574-ee38f8abd1f1','user2@example.com','$2b$10$iGUW4kiu3UxdMDAdXClwROGC7bLqQszuGOvxN/AQINbQ0Hg22Z2NS','2023-08-08 17:42:51.217 +00:00','2023-08-08 17:42:51.217 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:42:51.227Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:42:51.226 +00:00','2023-08-08 17:42:51.226 +00:00'),(DEFAULT,'USA','2023-08-08 17:42:51.226 +00:00','2023-08-08 17:42:51.226 +00:00'),(DEFAULT,'China','2023-08-08 17:42:51.226 +00:00','2023-08-08 17:42:51.226 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:42:51.226 +00:00','2023-08-08 17:42:51.226 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:42:51.226 +00:00','2023-08-08 17:42:51.226 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:42:51.231Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:42:51.230 +00:00','2023-08-08 17:42:51.230 +00:00'),(DEFAULT,'USD','2023-08-08 17:42:51.230 +00:00','2023-08-08 17:42:51.230 +00:00'),(DEFAULT,'CHY','2023-08-08 17:42:51.230 +00:00','2023-08-08 17:42:51.230 +00:00'),(DEFAULT,'UAH','2023-08-08 17:42:51.230 +00:00','2023-08-08 17:42:51.230 +00:00'),(DEFAULT,'KZT','2023-08-08 17:42:51.230 +00:00','2023-08-08 17:42:51.230 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:42:51.235Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00'),(DEFAULT,'Medications','2023-08-08 17:42:51.233 +00:00','2023-08-08 17:42:51.233 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:42:51.239Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:42:51.238 +00:00','2023-08-08 17:42:51.238 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:42:51.244Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('8132b204-10cd-4fde-8bac-275d217ee73d','Francesco','Hane','2023-08-08 17:42:51.243 +00:00','2023-08-08 17:42:51.243 +00:00','aff78ef3-5ba2-42e5-9446-d23c0369e4f3',1,5),('8b755ef1-5f75-4a1c-a13f-a0e5712abcbd','Lowell','Watsica','2023-08-08 17:42:51.243 +00:00','2023-08-08 17:42:51.243 +00:00','51253915-da22-425d-92c0-23c14ab2b699',1,1),('5495593f-dafd-4fa7-9a54-2d423a2b1447','Joel','Rempel','2023-08-08 17:42:51.243 +00:00','2023-08-08 17:42:51.243 +00:00','2de72bc4-387b-4887-8574-ee38f8abd1f1',5,4) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:42:51.260Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Licensed Cotton Car',73,'2025-02-16','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',1,2,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Generic Plastic Pizza',35,'2023-11-10','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',8,2,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Tasty Frozen Table',197,'2025-05-01','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',3,5,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Ergonomic Granite Tuna',223,'2024-08-27','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,2,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Unbranded Granite Hat',220,'2023-11-05','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',7,3,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Incredible Frozen Shoes',135,'2023-10-24','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,5,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Fantastic Wooden Car',235,'2024-09-27','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,1,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Sleek Concrete Computer',230,'2023-10-18','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',7,10,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Unbranded Soft Computer',104,'2024-05-24','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,4,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Handmade Plastic Fish',152,'2024-06-02','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,1,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Licensed Frozen Tuna',165,'2024-11-28','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',1,10,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Licensed Metal Sausages',207,'2024-08-21','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',3,7,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Intelligent Cotton Chicken',64,'2025-01-20','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',4,10,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Intelligent Fresh Pants',48,'2025-02-25','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',9,5,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Sleek Concrete Tuna',236,'2024-10-23','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',1,10,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Refined Fresh Car',38,'2024-04-13','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,4,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Incredible Metal Chicken',87,'2024-09-14','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',4,1,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Fantastic Cotton Bike',16,'2024-07-24','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',8,7,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Generic Concrete Shirt',20,'2024-07-13','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',10,9,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Ergonomic Steel Chicken',75,'2024-09-19','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',9,1,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Fantastic Plastic Hat',222,'2023-07-14','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',7,10,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Incredible Metal Ball',244,'2024-09-04','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,1,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Generic Steel Computer',148,'2025-04-06','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',1,9,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Small Concrete Shirt',46,'2024-03-16','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,1,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Rustic Wooden Shoes',225,'2024-11-26','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,2,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Generic Concrete Computer',57,'2024-12-12','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',10,10,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Licensed Soft Shoes',158,'2023-09-10','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',3,3,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Fantastic Fresh Gloves',36,'2024-01-18','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',9,5,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Incredible Metal Table',11,'2023-12-31','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',7,8,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Tasty Rubber Towels',76,'2024-07-24','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',6,8,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Practical Concrete Sausages',3,'2024-09-13','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',8,3,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Small Frozen Pizza',181,'2024-05-30','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',4,3,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Unbranded Soft Bacon',130,'2025-04-04','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,1,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Unbranded Plastic Fish',82,'2025-03-22','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',9,8,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Generic Cotton Fish',91,'2023-09-05','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,6,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Tasty Rubber Chair',34,'2023-08-31','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',7,2,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Generic Plastic Pants',31,'2023-12-15','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',3,9,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Refined Soft Bacon',135,'2024-04-19','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,10,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Ergonomic Cotton Sausages',159,'2024-05-03','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,3,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Sleek Frozen Salad',35,'2024-11-06','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,3,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Ergonomic Rubber Salad',20,'2025-03-10','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',8,5,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Handcrafted Cotton Pants',17,'2024-01-16','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,7,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Intelligent Granite Salad',131,'2025-02-18','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',10,1,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Refined Rubber Towels',208,'2024-07-20','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',10,8,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Rustic Cotton Soap',234,'2023-11-11','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',3,10,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Tasty Soft Cheese',255,'2024-09-10','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,9,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Fantastic Rubber Gloves',39,'2024-09-11','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',7,2,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Awesome Soft Ball',145,'2024-12-25','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',9,2,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Tasty Fresh Gloves',137,'2025-02-02','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',3,4,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Sleek Wooden Pizza',26,'2024-08-25','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,6,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Tasty Granite Pizza',23,'2024-08-17','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',6,7,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Ergonomic Granite Keyboard',240,'2025-02-20','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',5,10,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Intelligent Cotton Chicken',46,'2024-03-14','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',4,10,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Refined Steel Pizza',39,'2023-12-18','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',4,5,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Ergonomic Fresh Chips',61,'2024-08-31','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',8,5,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Tasty Granite Shirt',22,'2023-10-21','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',4,6,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Awesome Rubber Hat',45,'2024-11-05','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',8,5,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Rustic Granite Sausages',215,'2024-08-08','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,5,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Small Frozen Chips',189,'2024-05-30','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',8,5,'aff78ef3-5ba2-42e5-9446-d23c0369e4f3'),(DEFAULT,'Rustic Concrete Computer',78,'2023-09-17','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',2,5,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Sleek Wooden Soap',154,'2024-02-08','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',6,10,'51253915-da22-425d-92c0-23c14ab2b699'),(DEFAULT,'Refined Soft Cheese',250,'2024-05-20','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',6,2,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Generic Frozen Gloves',118,'2024-08-19','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',9,10,'2de72bc4-387b-4887-8574-ee38f8abd1f1'),(DEFAULT,'Awesome Plastic Computer',108,'2025-01-04','2023-08-08 17:42:51.249 +00:00','2023-08-08 17:42:51.249 +00:00',3,7,'2de72bc4-387b-4887-8574-ee38f8abd1f1') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:42:51.366Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:42:51.399Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:42:51.406Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:42:51.413Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:42:51.416Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:42:51.435Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:42:51.448Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c00';
2023-08-08T17:44:32.871Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:44:32.874Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:44:32.878Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:44:32.880Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:44:32.882Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:44:32.883Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:44:32.885Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:44:32.887Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:44:32.890Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:44:32.901Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:44:32.907Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:44:32.915Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:44:32.921Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:44:32.928Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:44:32.932Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:44:32.936Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:44:32.937Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:44:32.938Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:44:32.938Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:44:32.939Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:44:32.940Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:44:32.940Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:44:32.941Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:44:32.943Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:44:32.952Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:44:32.956Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:44:32.957Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:44:32.962Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:44:32.964Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:44:32.964Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:44:32.970Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:44:32.971Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:44:32.972Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:44:32.980Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:44:32.982Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:44:32.983Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:44:32.989Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:44:32.991Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:44:32.992Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:44:32.998Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:44:33.000Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:44:33.002Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:44:33.008Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:44:33.108Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('4bd25d69-f947-491f-9f0b-09df315d26b8','admin','$2b$10$VJRp.O1VvRMkmuH4F22QC.JGRW1d9Z5U23LfOQvrkJ6Rzn4u61xIC','2023-08-08 17:44:33.103 +00:00','2023-08-08 17:44:33.103 +00:00'),('21103594-d7a2-42da-a669-093844b30c59','user1@example.com','$2b$10$s64/004WhCHnoCJ8JaU9eOGlXfx29OqS/kkdwawqHrEax8fOklGyO','2023-08-08 17:44:33.103 +00:00','2023-08-08 17:44:33.103 +00:00'),('5cc5eca9-7a9d-427a-adb9-4f125eb018d6','user2@example.com','$2b$10$zNwy6aLYoD15gr5aG1XVe.Y8x/nzjlcOLJC1DaoUp42Xan0RCzxxC','2023-08-08 17:44:33.103 +00:00','2023-08-08 17:44:33.103 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:44:33.114Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:44:33.113 +00:00','2023-08-08 17:44:33.113 +00:00'),(DEFAULT,'USA','2023-08-08 17:44:33.113 +00:00','2023-08-08 17:44:33.113 +00:00'),(DEFAULT,'China','2023-08-08 17:44:33.113 +00:00','2023-08-08 17:44:33.113 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:44:33.113 +00:00','2023-08-08 17:44:33.113 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:44:33.113 +00:00','2023-08-08 17:44:33.113 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:44:33.117Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:44:33.116 +00:00','2023-08-08 17:44:33.116 +00:00'),(DEFAULT,'USD','2023-08-08 17:44:33.116 +00:00','2023-08-08 17:44:33.116 +00:00'),(DEFAULT,'CHY','2023-08-08 17:44:33.116 +00:00','2023-08-08 17:44:33.116 +00:00'),(DEFAULT,'UAH','2023-08-08 17:44:33.116 +00:00','2023-08-08 17:44:33.116 +00:00'),(DEFAULT,'KZT','2023-08-08 17:44:33.116 +00:00','2023-08-08 17:44:33.116 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:44:33.121Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00'),(DEFAULT,'Medications','2023-08-08 17:44:33.120 +00:00','2023-08-08 17:44:33.120 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:44:33.124Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:44:33.123 +00:00','2023-08-08 17:44:33.123 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:44:33.127Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('0b5ee472-6f61-4842-b82b-89ecdc5caf78','Elmer','Pacocha','2023-08-08 17:44:33.126 +00:00','2023-08-08 17:44:33.126 +00:00','4bd25d69-f947-491f-9f0b-09df315d26b8',1,3),('6fa36192-a618-40a3-94b1-90f084f08296','Lelia','Carter','2023-08-08 17:44:33.126 +00:00','2023-08-08 17:44:33.126 +00:00','21103594-d7a2-42da-a669-093844b30c59',5,5),('56754a3e-5143-4a58-b4f7-b54f6d756ef3','Elinore','Stanton','2023-08-08 17:44:33.126 +00:00','2023-08-08 17:44:33.126 +00:00','5cc5eca9-7a9d-427a-adb9-4f125eb018d6',1,1) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:44:33.141Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Licensed Metal Shirt',14,'2023-09-01','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,6,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Rustic Frozen Salad',90,'2024-08-27','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,3,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Rustic Plastic Mouse',5,'2024-03-31','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,5,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Generic Fresh Shirt',149,'2024-10-16','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',9,10,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Incredible Steel Shoes',123,'2024-12-14','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',10,5,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Refined Frozen Towels',25,'2024-01-19','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,2,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Generic Concrete Tuna',144,'2023-07-19','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',10,10,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Handcrafted Frozen Gloves',166,'2024-02-05','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',9,3,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Intelligent Soft Chair',80,'2024-10-25','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',1,7,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Ergonomic Metal Shoes',53,'2024-06-17','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',10,7,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Fantastic Wooden Pants',144,'2023-09-03','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',4,7,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Awesome Plastic Chair',73,'2024-02-22','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',10,2,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Licensed Fresh Table',108,'2024-02-07','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',8,1,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Handmade Steel Towels',84,'2023-12-04','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,2,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Awesome Rubber Soap',28,'2023-08-11','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',9,7,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Licensed Metal Fish',192,'2024-08-05','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',9,1,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Fantastic Cotton Shirt',174,'2024-01-20','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',6,3,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Tasty Granite Shirt',69,'2024-09-25','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,5,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Handcrafted Wooden Sausages',84,'2025-01-17','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',9,8,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Generic Granite Computer',144,'2024-03-09','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,6,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Unbranded Metal Pants',27,'2023-11-27','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',2,6,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Fantastic Frozen Shirt',179,'2023-09-22','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,9,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Refined Metal Ball',22,'2025-02-18','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,8,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Licensed Frozen Towels',217,'2024-07-21','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,3,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Small Frozen Fish',36,'2025-03-14','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,3,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Tasty Steel Car',141,'2024-02-01','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',6,10,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Incredible Soft Cheese',56,'2025-03-08','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,10,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Generic Granite Mouse',22,'2024-04-25','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',8,8,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Practical Steel Gloves',128,'2025-03-18','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',10,2,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Small Cotton Car',118,'2023-11-05','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',6,5,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Refined Granite Bike',139,'2024-08-16','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',4,3,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Handcrafted Fresh Car',110,'2024-03-24','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',4,4,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Unbranded Granite Bacon',111,'2023-09-29','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,6,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Sleek Wooden Bacon',160,'2024-08-17','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',1,6,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Handmade Fresh Ball',86,'2024-11-12','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',6,8,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Rustic Frozen Hat',96,'2024-09-22','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',8,9,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Unbranded Granite Bike',226,'2023-11-19','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,10,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Small Wooden Gloves',24,'2023-08-03','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,8,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Small Fresh Sausages',121,'2025-03-07','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',1,6,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Gorgeous Plastic Towels',140,'2025-04-18','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',1,7,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Unbranded Soft Table',233,'2023-07-30','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',4,2,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Licensed Steel Pants',225,'2024-05-02','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',6,3,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Handmade Fresh Tuna',27,'2024-04-15','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,8,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Tasty Frozen Keyboard',196,'2023-12-03','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',2,5,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Incredible Metal Sausages',234,'2024-03-08','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,1,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Practical Soft Salad',196,'2024-05-07','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',2,6,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Refined Wooden Soap',30,'2024-07-12','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',9,6,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Fantastic Concrete Cheese',138,'2024-07-07','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',2,9,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Incredible Cotton Table',195,'2023-12-03','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,9,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Gorgeous Plastic Pizza',4,'2023-11-27','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',1,7,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Refined Metal Mouse',18,'2023-12-24','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',6,6,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Practical Fresh Towels',34,'2024-01-14','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,4,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Fantastic Granite Hat',67,'2023-10-19','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,4,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Fantastic Steel Bacon',21,'2023-09-29','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',9,6,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Fantastic Frozen Sausages',73,'2023-10-27','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',1,5,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Intelligent Fresh Computer',70,'2023-12-03','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,10,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Gorgeous Fresh Car',102,'2024-04-15','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',4,5,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Handmade Frozen Chips',249,'2024-07-15','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,4,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Intelligent Concrete Keyboard',228,'2024-02-02','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',3,10,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Intelligent Granite Ball',99,'2023-11-23','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',7,6,'4bd25d69-f947-491f-9f0b-09df315d26b8'),(DEFAULT,'Gorgeous Metal Chips',72,'2024-03-19','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',5,2,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Rustic Granite Bike',138,'2024-01-17','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',10,5,'5cc5eca9-7a9d-427a-adb9-4f125eb018d6'),(DEFAULT,'Tasty Granite Chair',68,'2024-07-25','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',2,8,'21103594-d7a2-42da-a669-093844b30c59'),(DEFAULT,'Unbranded Fresh Soap',61,'2024-04-16','2023-08-08 17:44:33.131 +00:00','2023-08-08 17:44:33.131 +00:00',10,6,'4bd25d69-f947-491f-9f0b-09df315d26b8') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:44:33.219Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:44:33.260Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:44:33.271Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:44:33.284Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:44:33.288Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:44:33.327Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:44:33.355Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c00';
2023-08-08T17:45:43.652Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:45:43.676Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:45:43.696Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:45:43.704Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:45:43.718Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:45:43.734Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c00';
2023-08-08T17:45:48.161Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:45:48.188Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:45:48.207Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:45:48.215Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:45:48.228Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:45:48.247Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c00';
2023-08-08T17:48:51.340Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:48:51.343Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:48:51.352Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:48:51.354Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:48:51.356Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:48:51.357Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:48:51.359Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:48:51.360Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:48:51.363Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:48:51.369Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:48:51.373Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:48:51.376Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:48:51.379Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:48:51.382Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:48:51.386Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:48:51.389Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:48:51.389Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:48:51.390Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:48:51.390Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:48:51.391Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:48:51.391Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:48:51.392Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:48:51.393Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:48:51.395Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:48:51.403Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:48:51.407Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:48:51.407Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:48:51.412Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:48:51.413Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:48:51.414Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:48:51.418Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:48:51.419Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:48:51.420Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:48:51.426Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:48:51.427Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:48:51.428Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:48:51.433Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:48:51.435Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:48:51.435Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:48:51.440Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:48:51.442Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:48:51.443Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:48:51.446Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:48:51.561Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('510d825f-2624-4561-8c92-2bc099691860','admin','$2b$10$qsHoDN53yShmYbp6Fo0ieezoQTNyErVQ3hhggMwss.Qpf7wxriNfi','2023-08-08 17:48:51.550 +00:00','2023-08-08 17:48:51.550 +00:00'),('878edb03-3602-410c-add5-e0030663046c','user1@example.com','$2b$10$usm8ZINvk6s/VxreC7wnHudk1HY8Hr/kDPJRnDeZWKhWeh/CQojnW','2023-08-08 17:48:51.550 +00:00','2023-08-08 17:48:51.550 +00:00'),('b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3','user2@example.com','$2b$10$2GVPHDKIhytTTM6OZr5I4.POcySRU3BGejfoddMjuH13Ze4loueVO','2023-08-08 17:48:51.550 +00:00','2023-08-08 17:48:51.550 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:48:51.572Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:48:51.570 +00:00','2023-08-08 17:48:51.570 +00:00'),(DEFAULT,'USA','2023-08-08 17:48:51.570 +00:00','2023-08-08 17:48:51.570 +00:00'),(DEFAULT,'China','2023-08-08 17:48:51.570 +00:00','2023-08-08 17:48:51.570 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:48:51.570 +00:00','2023-08-08 17:48:51.570 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:48:51.570 +00:00','2023-08-08 17:48:51.570 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:48:51.576Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:48:51.574 +00:00','2023-08-08 17:48:51.574 +00:00'),(DEFAULT,'USD','2023-08-08 17:48:51.574 +00:00','2023-08-08 17:48:51.574 +00:00'),(DEFAULT,'CHY','2023-08-08 17:48:51.574 +00:00','2023-08-08 17:48:51.574 +00:00'),(DEFAULT,'UAH','2023-08-08 17:48:51.574 +00:00','2023-08-08 17:48:51.574 +00:00'),(DEFAULT,'KZT','2023-08-08 17:48:51.574 +00:00','2023-08-08 17:48:51.574 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:48:51.580Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00'),(DEFAULT,'Medications','2023-08-08 17:48:51.578 +00:00','2023-08-08 17:48:51.578 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:48:51.584Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:48:51.582 +00:00','2023-08-08 17:48:51.582 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:48:51.589Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('e52ecaa3-62ca-42dd-9d45-e5afce3005cc','Weston','Bailey','2023-08-08 17:48:51.588 +00:00','2023-08-08 17:48:51.588 +00:00','510d825f-2624-4561-8c92-2bc099691860',1,3),('bfb75429-728a-4d56-ae65-5df82cb86dc2','Evie','Koss','2023-08-08 17:48:51.588 +00:00','2023-08-08 17:48:51.588 +00:00','878edb03-3602-410c-add5-e0030663046c',2,4),('86f88bf9-37ef-402f-b17c-28d8fc54c1db','Arielle','Gleason','2023-08-08 17:48:51.588 +00:00','2023-08-08 17:48:51.588 +00:00','b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3',1,4) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:48:51.628Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Sleek Granite Shirt',226,'2024-02-12','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,3,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Intelligent Fresh Computer',46,'2023-12-22','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,9,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Rustic Plastic Soap',223,'2025-01-09','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,10,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Rustic Fresh Fish',100,'2024-01-03','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,7,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Awesome Cotton Soap',180,'2024-10-12','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',9,10,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Ergonomic Steel Pants',91,'2024-05-20','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',1,2,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Intelligent Metal Table',1,'2023-08-04','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,1,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Gorgeous Concrete Fish',124,'2024-06-03','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,3,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Awesome Concrete Car',139,'2023-12-30','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',10,8,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Handmade Granite Chips',227,'2024-04-29','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',2,3,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Intelligent Soft Towels',171,'2024-10-06','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,5,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Rustic Frozen Pants',27,'2023-07-21','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',2,6,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Generic Frozen Tuna',231,'2025-04-25','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',6,4,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Licensed Cotton Car',187,'2024-06-17','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,8,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Gorgeous Soft Bacon',178,'2023-08-01','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',3,1,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Generic Steel Shirt',192,'2023-10-18','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',6,5,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Awesome Rubber Soap',45,'2025-04-13','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',10,7,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Awesome Wooden Pants',181,'2025-01-23','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',6,8,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Small Plastic Hat',232,'2025-03-26','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',1,3,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Ergonomic Steel Cheese',66,'2023-08-12','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',2,9,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Handcrafted Fresh Chicken',105,'2025-03-13','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',1,9,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Intelligent Soft Pizza',223,'2025-04-07','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',9,2,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Tasty Soft Chicken',79,'2023-07-24','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,3,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Intelligent Rubber Pants',214,'2023-12-12','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',9,8,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Sleek Cotton Chair',124,'2024-11-22','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',2,10,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Generic Rubber Pizza',190,'2024-01-06','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,10,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Awesome Plastic Bike',65,'2024-04-16','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',4,6,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Sleek Metal Soap',166,'2023-08-22','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',4,2,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Handcrafted Soft Shirt',80,'2025-02-12','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',2,9,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Generic Frozen Hat',190,'2024-04-02','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',9,9,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Ergonomic Concrete Sausages',17,'2023-11-29','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,8,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Incredible Soft Gloves',44,'2023-10-14','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',4,3,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Awesome Cotton Car',160,'2023-08-20','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',1,8,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Gorgeous Concrete Bacon',64,'2023-12-03','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',4,4,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Licensed Wooden Gloves',8,'2025-04-25','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',10,8,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Tasty Frozen Shirt',65,'2024-03-10','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',2,1,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Fantastic Plastic Fish',115,'2025-02-01','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,8,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Licensed Soft Tuna',84,'2024-08-12','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',8,1,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Unbranded Plastic Computer',88,'2024-02-07','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',2,6,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Fantastic Soft Tuna',157,'2023-09-28','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',3,7,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Handmade Granite Pants',10,'2023-07-31','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',8,4,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Gorgeous Fresh Shoes',11,'2024-06-21','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',4,10,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Sleek Steel Towels',224,'2023-12-18','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,4,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Intelligent Concrete Computer',48,'2024-02-13','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',3,8,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Unbranded Rubber Table',135,'2025-04-03','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',4,1,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Unbranded Metal Ball',32,'2024-01-11','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,10,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Fantastic Soft Mouse',141,'2025-04-26','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,5,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Gorgeous Granite Hat',46,'2024-03-02','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',8,2,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Handcrafted Metal Bike',43,'2024-01-18','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',10,3,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Handcrafted Granite Pants',118,'2024-12-04','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',3,8,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Handcrafted Fresh Mouse',238,'2024-08-14','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,6,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Generic Soft Computer',236,'2025-04-01','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',10,5,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Refined Steel Tuna',95,'2024-10-05','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',6,5,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Unbranded Wooden Tuna',1,'2024-08-04','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,1,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Incredible Metal Hat',108,'2024-09-03','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,10,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Tasty Concrete Pizza',16,'2025-04-18','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',1,3,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Tasty Concrete Towels',114,'2024-05-22','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',5,9,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Small Plastic Pizza',187,'2024-01-17','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',3,1,'510d825f-2624-4561-8c92-2bc099691860'),(DEFAULT,'Unbranded Steel Table',91,'2024-07-28','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',8,6,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Practical Soft Cheese',149,'2024-03-05','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',8,3,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Tasty Plastic Fish',68,'2023-07-09','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,2,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Handcrafted Concrete Bike',90,'2024-09-08','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,9,'878edb03-3602-410c-add5-e0030663046c'),(DEFAULT,'Intelligent Fresh Chicken',180,'2023-07-15','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',1,5,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3'),(DEFAULT,'Tasty Soft Table',117,'2024-12-27','2023-08-08 17:48:51.594 +00:00','2023-08-08 17:48:51.594 +00:00',7,7,'b3cc4f0c-b9bf-4cd5-a05e-74f7b49fc2a3') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:49:01.458Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:49:01.518Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country" WHERE "country"."name" = 'Bavaria';
2023-08-08T17:49:01.533Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:49:01.547Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:49:01.556Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:49:01.561Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:49:01.583Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:49:01.596Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c00';
2023-08-08T17:50:54.284Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:50:54.287Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:50:54.292Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:50:54.294Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:50:54.297Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:50:54.300Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:50:54.302Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:50:54.305Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:50:54.308Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:50:54.319Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:50:54.326Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:50:54.333Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:50:54.340Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:50:54.346Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:50:54.353Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:50:54.362Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:50:54.364Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:50:54.366Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:50:54.368Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:50:54.370Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:50:54.370Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:50:54.372Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:50:54.373Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:50:54.378Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:50:54.387Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:50:54.396Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:50:54.398Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:50:54.405Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:50:54.408Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:50:54.410Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:50:54.417Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:50:54.420Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:50:54.422Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:50:54.431Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:50:54.433Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:50:54.435Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:50:54.442Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:50:54.446Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:50:54.448Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:50:54.455Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:50:54.458Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:50:54.462Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:50:54.470Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:50:54.584Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('25ebefd3-b995-475b-930b-9cd187d972d7','admin','$2b$10$iXKxYz4fCLcaXqrY.YSneuo3svRExgitRFQDidUidpP5eESgMysZe','2023-08-08 17:50:54.579 +00:00','2023-08-08 17:50:54.579 +00:00'),('7b3fcc19-175d-4dc8-b28c-cf981917b054','user1@example.com','$2b$10$ZLgXI3YY/WEpRHPASYJtV.F3NhZrFMlyy/cbAO7TLZV.PqxhxA/kG','2023-08-08 17:50:54.579 +00:00','2023-08-08 17:50:54.579 +00:00'),('b638617d-4618-416c-b2a3-c0dc154e8153','user2@example.com','$2b$10$uLvfteqZ1s6uvvc6OCrZ4OS7yUE2B1a09F/rKaW73P5mqW6j31sMq','2023-08-08 17:50:54.579 +00:00','2023-08-08 17:50:54.579 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:50:54.590Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:50:54.588 +00:00','2023-08-08 17:50:54.588 +00:00'),(DEFAULT,'USA','2023-08-08 17:50:54.588 +00:00','2023-08-08 17:50:54.588 +00:00'),(DEFAULT,'China','2023-08-08 17:50:54.588 +00:00','2023-08-08 17:50:54.588 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:50:54.588 +00:00','2023-08-08 17:50:54.588 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:50:54.588 +00:00','2023-08-08 17:50:54.588 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:50:54.593Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:50:54.592 +00:00','2023-08-08 17:50:54.592 +00:00'),(DEFAULT,'USD','2023-08-08 17:50:54.592 +00:00','2023-08-08 17:50:54.592 +00:00'),(DEFAULT,'CHY','2023-08-08 17:50:54.592 +00:00','2023-08-08 17:50:54.592 +00:00'),(DEFAULT,'UAH','2023-08-08 17:50:54.592 +00:00','2023-08-08 17:50:54.592 +00:00'),(DEFAULT,'KZT','2023-08-08 17:50:54.592 +00:00','2023-08-08 17:50:54.592 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:50:54.596Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00'),(DEFAULT,'Medications','2023-08-08 17:50:54.595 +00:00','2023-08-08 17:50:54.595 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:50:54.599Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:50:54.598 +00:00','2023-08-08 17:50:54.598 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:50:54.603Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('b8600208-4617-44cc-bf1c-ce315d97420f','Zackery','Spencer','2023-08-08 17:50:54.602 +00:00','2023-08-08 17:50:54.602 +00:00','25ebefd3-b995-475b-930b-9cd187d972d7',2,2),('715f2e45-4537-4c48-94b2-04e92e9ee2f8','Henri','Herman','2023-08-08 17:50:54.602 +00:00','2023-08-08 17:50:54.602 +00:00','7b3fcc19-175d-4dc8-b28c-cf981917b054',3,1),('3868a16c-a156-4638-b277-cf51cb40a814','Donnie','Greenholt','2023-08-08 17:50:54.602 +00:00','2023-08-08 17:50:54.602 +00:00','b638617d-4618-416c-b2a3-c0dc154e8153',3,2) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:50:54.617Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Practical Fresh Shoes',250,'2025-03-24','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',9,7,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Fantastic Frozen Chair',24,'2025-04-29','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',8,9,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Incredible Soft Cheese',2,'2024-02-21','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,6,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Awesome Concrete Fish',37,'2025-02-17','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,3,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Small Wooden Shirt',213,'2024-05-16','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,6,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Generic Granite Chair',197,'2024-06-15','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',10,2,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Sleek Soft Keyboard',151,'2023-10-10','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',10,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Unbranded Rubber Fish',146,'2024-08-10','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',10,4,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Tasty Soft Chips',152,'2024-06-07','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,7,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Ergonomic Concrete Fish',209,'2025-03-24','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',5,4,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Generic Plastic Table',12,'2023-12-18','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',2,6,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Unbranded Steel Keyboard',214,'2023-08-12','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',2,6,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Generic Concrete Shirt',159,'2024-09-30','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,2,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Awesome Steel Shoes',23,'2025-02-07','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',8,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Licensed Cotton Pants',78,'2024-09-28','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',6,6,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Practical Fresh Gloves',63,'2025-02-27','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',6,7,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Incredible Granite Hat',102,'2024-02-27','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',2,7,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Generic Fresh Keyboard',75,'2023-12-14','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,4,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Sleek Frozen Computer',66,'2023-12-29','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',5,5,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Small Concrete Mouse',64,'2025-03-12','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,1,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Small Soft Salad',56,'2024-11-19','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,6,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Ergonomic Steel Towels',102,'2023-10-11','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,1,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Intelligent Plastic Gloves',184,'2024-10-07','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',10,2,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Small Cotton Tuna',253,'2024-11-12','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,2,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Rustic Wooden Soap',198,'2023-12-22','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,7,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Unbranded Steel Ball',253,'2024-04-28','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',5,10,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Licensed Wooden Sausages',233,'2025-04-23','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,3,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Rustic Wooden Shoes',253,'2025-04-20','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',3,9,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Fantastic Granite Car',4,'2024-07-31','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',9,10,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Intelligent Metal Bacon',155,'2024-02-18','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',10,6,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Handcrafted Cotton Mouse',136,'2024-09-22','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',6,10,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Ergonomic Granite Cheese',91,'2023-07-27','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',4,6,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Intelligent Plastic Sausages',110,'2024-12-27','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',6,5,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Intelligent Rubber Salad',114,'2024-08-07','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',8,2,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Sleek Metal Soap',147,'2023-11-04','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,10,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Refined Rubber Chair',111,'2023-12-31','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',2,9,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Fantastic Steel Pizza',44,'2023-11-24','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,6,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Gorgeous Metal Keyboard',243,'2024-12-27','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',5,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Awesome Steel Shirt',35,'2025-03-18','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',2,3,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Intelligent Concrete Ball',215,'2024-08-14','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',8,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Tasty Granite Soap',215,'2024-06-18','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,2,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Tasty Concrete Mouse',167,'2025-03-27','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',9,7,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Ergonomic Plastic Chips',56,'2024-09-25','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',5,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Gorgeous Frozen Fish',86,'2023-10-23','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',5,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Rustic Steel Chicken',175,'2024-12-16','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',8,4,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Small Soft Bacon',6,'2023-11-15','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,7,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Ergonomic Metal Sausages',132,'2023-10-20','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',4,9,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Practical Concrete Cheese',164,'2024-02-01','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',9,4,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Intelligent Frozen Tuna',17,'2023-07-31','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,1,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Handmade Granite Table',103,'2025-02-03','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',3,4,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Incredible Frozen Pants',37,'2024-02-07','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,2,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Gorgeous Soft Sausages',208,'2024-12-31','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',10,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Handmade Plastic Chips',191,'2025-03-07','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,3,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Fantastic Granite Car',192,'2024-08-12','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',3,9,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Intelligent Wooden Fish',20,'2024-12-25','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',4,4,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Tasty Steel Shirt',21,'2024-02-24','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,4,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Fantastic Steel Bike',192,'2024-05-30','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,9,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Generic Concrete Chair',222,'2024-10-23','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',9,4,'25ebefd3-b995-475b-930b-9cd187d972d7'),(DEFAULT,'Practical Granite Shirt',146,'2025-03-05','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,1,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Intelligent Fresh Car',206,'2023-08-21','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',7,5,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Rustic Rubber Pizza',190,'2024-02-07','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',5,9,'7b3fcc19-175d-4dc8-b28c-cf981917b054'),(DEFAULT,'Ergonomic Wooden Table',226,'2024-05-04','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',9,3,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Small Plastic Salad',44,'2024-04-01','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',1,4,'b638617d-4618-416c-b2a3-c0dc154e8153'),(DEFAULT,'Gorgeous Cotton Pants',27,'2024-07-01','2023-08-08 17:50:54.606 +00:00','2023-08-08 17:50:54.606 +00:00',8,2,'7b3fcc19-175d-4dc8-b28c-cf981917b054') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:51:45.594Z - Executing (default): SELECT 1+1 AS result
2023-08-08T17:51:45.597Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:51:45.600Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:51:45.602Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:51:45.604Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:51:45.606Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:51:45.607Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:51:45.609Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:51:45.612Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'users' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:51:45.618Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'profiles' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:51:45.622Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'products' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:51:45.625Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'categories' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:51:45.628Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'storage_locations' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:51:45.635Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'currencies' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:51:45.643Z - Executing (default): SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = 'countries' AND tc.table_catalog = 'smart_cellar'
2023-08-08T17:51:45.652Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:51:45.653Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:51:45.653Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:51:45.654Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:51:45.655Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:51:45.655Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:51:45.656Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:51:45.657Z - Executing (default): DROP TABLE IF EXISTS "users" CASCADE;
2023-08-08T17:51:45.659Z - Executing (default): CREATE TABLE IF NOT EXISTS "users" ("id" UUID , "email" VARCHAR(255) UNIQUE, "password" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:51:45.671Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:51:45.676Z - Executing (default): DROP TABLE IF EXISTS "countries" CASCADE;
2023-08-08T17:51:45.677Z - Executing (default): CREATE TABLE IF NOT EXISTS "countries" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:51:45.683Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'countries' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:51:45.686Z - Executing (default): DROP TABLE IF EXISTS "currencies" CASCADE;
2023-08-08T17:51:45.687Z - Executing (default): CREATE TABLE IF NOT EXISTS "currencies" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:51:45.693Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'currencies' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:51:45.694Z - Executing (default): DROP TABLE IF EXISTS "profiles" CASCADE;
2023-08-08T17:51:45.695Z - Executing (default): CREATE TABLE IF NOT EXISTS "profiles" ("id" UUID , "firstname" VARCHAR(255) NOT NULL, "lastname" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "countryId" INTEGER REFERENCES "countries" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "currencyId" INTEGER REFERENCES "currencies" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:51:45.700Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'profiles' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:51:45.701Z - Executing (default): DROP TABLE IF EXISTS "categories" CASCADE;
2023-08-08T17:51:45.702Z - Executing (default): CREATE TABLE IF NOT EXISTS "categories" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:51:45.708Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'categories' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:51:45.710Z - Executing (default): DROP TABLE IF EXISTS "storage_locations" CASCADE;
2023-08-08T17:51:45.711Z - Executing (default): CREATE TABLE IF NOT EXISTS "storage_locations" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL UNIQUE, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
2023-08-08T17:51:45.717Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'storage_locations' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:51:45.720Z - Executing (default): DROP TABLE IF EXISTS "products" CASCADE;
2023-08-08T17:51:45.723Z - Executing (default): CREATE TABLE IF NOT EXISTS "products" ("id"  SERIAL , "name" VARCHAR(255) NOT NULL, "quantity" INTEGER DEFAULT 0, "date" DATE NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, "categoryId" INTEGER REFERENCES "categories" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "storageLocationId" INTEGER REFERENCES "storage_locations" ("id") ON DELETE SET NULL ON UPDATE CASCADE, "userId" UUID REFERENCES "users" ("id") ON DELETE SET NULL ON UPDATE CASCADE, PRIMARY KEY ("id"));
2023-08-08T17:51:45.729Z - Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'products' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
2023-08-08T17:51:45.843Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ('bda2ee3b-1360-4000-9108-941e8003b5f4','admin','$2b$10$SVlf0BfIMl3oBHPUwelm9uc8y286tBSWzIiVEzZY91SYUqVSDddpW','2023-08-08 17:51:45.829 +00:00','2023-08-08 17:51:45.829 +00:00'),('29ffa421-2d3b-4ecb-8c48-704686391f09','user1@example.com','$2b$10$xKdF4BB7xJh9tCizVniAru5NAXMs8q8l73zdLHvRgL6OFum7TyEuu','2023-08-08 17:51:45.829 +00:00','2023-08-08 17:51:45.829 +00:00'),('9edf99a2-962b-4425-b93d-556d96307c6e','user2@example.com','$2b$10$l.8bejHsG07OWBDA.IfFZOdXMZ/DajtMW1r7na/1QxV8rR.UKsppK','2023-08-08 17:51:45.829 +00:00','2023-08-08 17:51:45.829 +00:00') RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:51:45.852Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Germany','2023-08-08 17:51:45.849 +00:00','2023-08-08 17:51:45.849 +00:00'),(DEFAULT,'USA','2023-08-08 17:51:45.849 +00:00','2023-08-08 17:51:45.849 +00:00'),(DEFAULT,'China','2023-08-08 17:51:45.849 +00:00','2023-08-08 17:51:45.849 +00:00'),(DEFAULT,'Ukraine','2023-08-08 17:51:45.849 +00:00','2023-08-08 17:51:45.849 +00:00'),(DEFAULT,'Kazakhstan','2023-08-08 17:51:45.849 +00:00','2023-08-08 17:51:45.849 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:51:45.856Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'EUR','2023-08-08 17:51:45.854 +00:00','2023-08-08 17:51:45.854 +00:00'),(DEFAULT,'USD','2023-08-08 17:51:45.854 +00:00','2023-08-08 17:51:45.854 +00:00'),(DEFAULT,'CHY','2023-08-08 17:51:45.854 +00:00','2023-08-08 17:51:45.854 +00:00'),(DEFAULT,'UAH','2023-08-08 17:51:45.854 +00:00','2023-08-08 17:51:45.854 +00:00'),(DEFAULT,'KZT','2023-08-08 17:51:45.854 +00:00','2023-08-08 17:51:45.854 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:51:45.862Z - Executing (default): INSERT INTO "categories" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Canned Goods','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Dry Pasta and Grains','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Baking Supplies','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Cooking Oils','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Spices and Seasonings','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Condiments','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Nuts and Seeds','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Dried Fruits','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Shelf-Stable Beverages','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00'),(DEFAULT,'Medications','2023-08-08 17:51:45.859 +00:00','2023-08-08 17:51:45.859 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:51:45.866Z - Executing (default): INSERT INTO "storage_locations" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,'Pantry','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Refrigerator','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Freezer','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Cupboard','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Spice Rack','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Drawer','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Fruit Bowl','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Wine Rack','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Bread Box','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00'),(DEFAULT,'Canning Shelf','2023-08-08 17:51:45.864 +00:00','2023-08-08 17:51:45.864 +00:00') RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:51:45.873Z - Executing (default): INSERT INTO "profiles" ("id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId") VALUES ('a9b901f8-321c-4d8d-8664-ae5869085a9e','Alejandra','Quigley','2023-08-08 17:51:45.871 +00:00','2023-08-08 17:51:45.871 +00:00','bda2ee3b-1360-4000-9108-941e8003b5f4',2,4),('4612845c-ad0a-4c26-9fc8-7ba9c1472e80','Dean','Rutherford','2023-08-08 17:51:45.871 +00:00','2023-08-08 17:51:45.871 +00:00','29ffa421-2d3b-4ecb-8c48-704686391f09',1,1),('253e2376-37b3-48e7-9ca3-7ee85567153c','Mallie','Lubowitz','2023-08-08 17:51:45.871 +00:00','2023-08-08 17:51:45.871 +00:00','9edf99a2-962b-4425-b93d-556d96307c6e',4,1) RETURNING "id","firstname","lastname","createdAt","updatedAt","userId","countryId","currencyId";
2023-08-08T17:51:45.910Z - Executing (default): INSERT INTO "products" ("id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId") VALUES (DEFAULT,'Fantastic Metal Towels',24,'2023-09-22','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',2,6,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Handmade Frozen Towels',148,'2024-06-09','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',5,6,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Handmade Frozen Salad',156,'2025-03-12','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',1,7,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Fantastic Rubber Chair',26,'2024-04-25','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',7,10,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Awesome Granite Bike',57,'2024-01-27','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',2,6,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Generic Soft Sausages',191,'2024-09-16','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',4,4,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Handmade Fresh Car',87,'2024-09-09','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',5,4,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Awesome Fresh Shoes',251,'2024-12-05','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',5,1,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Handmade Plastic Mouse',228,'2024-02-06','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',9,10,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Fantastic Fresh Salad',28,'2024-09-03','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',5,6,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Ergonomic Rubber Hat',90,'2025-01-11','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,9,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Small Frozen Cheese',88,'2024-08-22','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',7,3,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Handmade Concrete Computer',9,'2024-03-21','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',4,10,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Unbranded Rubber Sausages',226,'2024-03-19','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,3,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Rustic Granite Towels',74,'2023-12-18','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',9,7,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Handmade Steel Chicken',170,'2024-06-19','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',3,2,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Fantastic Wooden Car',203,'2024-12-01','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,9,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Practical Wooden Sausages',150,'2023-12-24','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',1,5,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Awesome Soft Chair',55,'2023-09-24','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',4,7,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Practical Granite Mouse',113,'2024-12-24','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',3,9,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Ergonomic Soft Shoes',155,'2024-08-01','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',7,5,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Ergonomic Cotton Gloves',248,'2023-12-05','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',1,2,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Licensed Frozen Chips',159,'2024-05-04','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,8,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Handcrafted Rubber Towels',182,'2025-02-19','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',8,8,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Gorgeous Steel Ball',2,'2024-04-30','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',9,5,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Incredible Soft Computer',249,'2023-11-30','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',6,3,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Generic Granite Fish',30,'2024-08-11','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,2,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Gorgeous Soft Bacon',23,'2023-12-12','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',7,10,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Gorgeous Rubber Tuna',131,'2023-09-10','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',9,10,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Handmade Soft Chair',123,'2024-01-21','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,5,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Licensed Rubber Sausages',195,'2024-06-24','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',6,4,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Intelligent Soft Gloves',147,'2025-01-28','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',2,6,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Handcrafted Frozen Keyboard',37,'2023-11-27','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',6,2,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Generic Concrete Chicken',234,'2023-11-18','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',7,6,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Licensed Fresh Chips',106,'2024-06-17','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',8,1,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Fantastic Wooden Ball',159,'2025-04-13','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',2,7,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Handcrafted Wooden Table',95,'2023-11-28','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',4,1,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Practical Rubber Shoes',128,'2024-09-27','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',7,10,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Refined Rubber Bacon',55,'2025-04-12','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',6,3,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Fantastic Rubber Hat',232,'2023-10-04','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',4,10,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Ergonomic Granite Table',111,'2024-05-17','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',7,4,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Unbranded Granite Towels',164,'2024-04-13','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,8,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Handcrafted Cotton Car',111,'2024-03-06','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',3,8,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Fantastic Granite Chair',142,'2023-08-15','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',6,10,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Practical Fresh Computer',254,'2024-07-10','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',9,10,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Refined Rubber Cheese',180,'2024-02-16','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',3,5,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Handcrafted Plastic Mouse',81,'2024-06-26','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,3,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Licensed Granite Ball',170,'2025-01-04','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',5,6,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Gorgeous Rubber Shoes',95,'2025-03-29','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',5,8,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Gorgeous Fresh Pizza',153,'2024-01-01','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',2,6,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Small Steel Fish',20,'2024-10-22','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',3,8,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Generic Concrete Table',105,'2025-01-20','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',3,3,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Ergonomic Metal Cheese',203,'2024-08-16','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,4,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Tasty Concrete Pants',99,'2024-04-24','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',8,3,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Tasty Metal Table',90,'2025-02-02','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',2,5,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Tasty Cotton Fish',184,'2024-07-19','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',9,6,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Small Plastic Salad',255,'2025-01-28','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',2,8,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Licensed Metal Salad',12,'2024-10-21','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',10,2,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Generic Wooden Chicken',14,'2024-04-18','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',5,9,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Gorgeous Fresh Shoes',48,'2024-02-27','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',9,10,'29ffa421-2d3b-4ecb-8c48-704686391f09'),(DEFAULT,'Fantastic Wooden Bike',115,'2024-09-18','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',8,5,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Handcrafted Metal Soap',201,'2023-12-11','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',6,5,'9edf99a2-962b-4425-b93d-556d96307c6e'),(DEFAULT,'Awesome Soft Pants',13,'2023-08-29','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',4,1,'bda2ee3b-1360-4000-9108-941e8003b5f4'),(DEFAULT,'Practical Steel Shoes',218,'2025-04-04','2023-08-08 17:51:45.879 +00:00','2023-08-08 17:51:45.879 +00:00',1,6,'bda2ee3b-1360-4000-9108-941e8003b5f4') RETURNING "id","name","quantity","date","createdAt","updatedAt","categoryId","storageLocationId","userId";
2023-08-08T17:52:31.521Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country";
2023-08-08T17:52:31.587Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "countries" AS "country" WHERE "country"."name" = 'Bavaria';
2023-08-08T17:52:31.600Z - Executing (default): INSERT INTO "countries" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:52:31.610Z - Executing (default): SELECT "id", "name", "createdAt", "updatedAt" FROM "currencies" AS "currency" WHERE "currency"."name" = 'Marke';
2023-08-08T17:52:31.612Z - Executing (default): INSERT INTO "currencies" ("id","name","createdAt","updatedAt") VALUES (DEFAULT,$1,$2,$3) RETURNING "id","name","createdAt","updatedAt";
2023-08-08T17:52:31.618Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:52:31.624Z - Executing (default): INSERT INTO "users" ("id","email","password","createdAt","updatedAt") VALUES ($1,$2,$3,$4,$5) RETURNING "id","email","password","createdAt","updatedAt";
2023-08-08T17:52:31.649Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."email" = 'user22@user.de';
2023-08-08T17:52:31.672Z - Executing (default): SELECT "id", "email", "password", "createdAt", "updatedAt" FROM "users" AS "user" WHERE "user"."id" = 'cf9ce160-2c8a-4414-9934-269a6d833c00';
